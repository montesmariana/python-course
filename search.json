[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About this course",
    "section": "",
    "text": "Content\n\nFundamentals of Python: I know that the course website says that the focus lies on “NLP, automation, text analysis and machine learning”, but I find it more important to give you a strong basis that helps you feel confident about learning more and gives you the tools to understand tutorials and documentation. We’ll adjust the speed to the students.\nWe’ll try to cover actual fundamentals in the first half, i.e. before easter: types of variables, working with lists and dictionaries, creating functions, using classes, but also opening and saving files, using regular expressions, parsing XML.\nIn the second half we will put the regular expressions and parsing into practice and check out packages for machine learning (scikit-learn) and NLP (nltk, maybe spacy). We’ll also look a bit into testing and documenting, so that you still understand next year what you tried to do today.\n\n\n\nAssignments\n\nThere will be a final assignment that consists of solving a problem with Python code and explaining it/documenting it. For those submitting in June, it will be 80% fo the grade. For those submitting in August, it will be a bit more complex and account for 100% of the grade.\nI will propose problems that you can try to solve, but we can also brainstorm and discuss ideas during the semester as you learn more about the contents.\nThere will be two small assignments during the semester: one due after Easter and one that is a presentation at the end of the semester. Each of them accounts for 10% of the grade.\n\n\n\nRequirements\nMake sure they all have Anaconda (as late a version as possible) and VS Code installed.\nEach class:\n\nOpen Anaconda\nSelect (in Home) or create (in Environments) the appropriate environment. For the first classes we can use a basic one with no additional packages.\nIn Home, make sure that Jupyter Notebook and VS Code are installed for your environment.\nOpen Jupyter Notebook and from its file explored find your way to the folder where you store the scripts for this class. Open an existing notebook or create a new one, as appropriate. Try out the code from the slides in that notebook.\nAfter some experimentation, open VS Code to write a small script and run it in the console. Depending on the rhythm of the class, this might be the last task or something to do at home."
  },
  {
    "objectID": "slides/iterables.html#lists",
    "href": "slides/iterables.html#lists",
    "title": "Working with iterables",
    "section": "Lists",
    "text": "Lists\nProblem: I have a text and I would like to know:\n\nHow many types and tokens it has\nHow long its words are\n\n\nHow do we go about this with Python?\n\ntext = (\"This is a text with a few words and \"\n    \"no punctuation and it is easy to work with\")\ntext\n\n'This is a text with a few words and no punctuation and it is easy to work with'"
  },
  {
    "objectID": "slides/iterables.html#basic-tokenization",
    "href": "slides/iterables.html#basic-tokenization",
    "title": "Working with iterables",
    "section": "Basic tokenization",
    "text": "Basic tokenization\nWe’ll turn the text into all lower case and make a list splitting it via the spaces.\n\ntokenized_text = text.lower().split(' ')\ntokenized_text\n\n['this',\n 'is',\n 'a',\n 'text',\n 'with',\n 'a',\n 'few',\n 'words',\n 'and',\n 'no',\n 'punctuation',\n 'and',\n 'it',\n 'is',\n 'easy',\n 'to',\n 'work',\n 'with']"
  },
  {
    "objectID": "slides/iterables.html#types-and-tokens",
    "href": "slides/iterables.html#types-and-tokens",
    "title": "Working with iterables",
    "section": "Types and tokens",
    "text": "Types and tokens\nTokens are the individual elements.\n\nn_tokens = len(tokenized_text)\nf\"My text has {n_tokens} tokens.\"\n\n'My text has 18 tokens.'\n\n\n\nTypes are unique elements.\n\ntypes = set(tokenized_text)\ntypes\n\n{'a',\n 'and',\n 'easy',\n 'few',\n 'is',\n 'it',\n 'no',\n 'punctuation',\n 'text',\n 'this',\n 'to',\n 'with',\n 'words',\n 'work'}"
  },
  {
    "objectID": "slides/iterables.html#info-summary",
    "href": "slides/iterables.html#info-summary",
    "title": "Working with iterables",
    "section": "Info summary",
    "text": "Info summary\n\nn_types = len(types)\n\n(f\"My text has {n_tokens} tokens and {n_types} types, \"\nf\"i.e. a type token ratio of {round(n_types/n_tokens, 2)}.\")\n\n'My text has 18 tokens and 14 types, i.e. a type token ratio of 0.78.'\n\n\n\nOK, what about the length of each word?\n\nwords = list(types)\nprint(words)\n\n['is', 'few', 'punctuation', 'easy', 'a', 'with', 'words', 'no', 'to', 'work', 'this', 'it', 'and', 'text']"
  },
  {
    "objectID": "slides/iterables.html#for-loops",
    "href": "slides/iterables.html#for-loops",
    "title": "Working with iterables",
    "section": "for loops",
    "text": "for loops\n\nfor word in words:\n    print(word)\n\nis\nfew\npunctuation\neasy\na\nwith\nwords\nno\nto\nwork\nthis\nit\nand\ntext\n\n\n\nMore about for loops"
  },
  {
    "objectID": "slides/iterables.html#for-loops-1",
    "href": "slides/iterables.html#for-loops-1",
    "title": "Working with iterables",
    "section": "for loops",
    "text": "for loops\n\nfor word in words:\n    print(f'\"{word}\" is {len(word)} characters long.')\n\n\"is\" is 2 characters long.\n\"few\" is 3 characters long.\n\"punctuation\" is 11 characters long.\n\"easy\" is 4 characters long.\n\"a\" is 1 characters long.\n\"with\" is 4 characters long.\n\"words\" is 5 characters long.\n\"no\" is 2 characters long.\n\"to\" is 2 characters long.\n\"work\" is 4 characters long.\n\"this\" is 4 characters long.\n\"it\" is 2 characters long.\n\"and\" is 3 characters long.\n\"text\" is 4 characters long.\n\n\n\nMore about for loops"
  },
  {
    "objectID": "slides/iterables.html#for-loops-continue",
    "href": "slides/iterables.html#for-loops-continue",
    "title": "Working with iterables",
    "section": "for loops: continue",
    "text": "for loops: continue\n\nfor word in words:\n    if len(word) < 4:\n        continue\n    print(f'\"{word}\" is {len(word)} characters long.')\n\n\"punctuation\" is 11 characters long.\n\"easy\" is 4 characters long.\n\"with\" is 4 characters long.\n\"words\" is 5 characters long.\n\"work\" is 4 characters long.\n\"this\" is 4 characters long.\n\"text\" is 4 characters long.\n\n\n\nMore about for loops"
  },
  {
    "objectID": "slides/iterables.html#for-loops-break",
    "href": "slides/iterables.html#for-loops-break",
    "title": "Working with iterables",
    "section": "for loops: break",
    "text": "for loops: break\n\nfor word in words:\n    if len(word) < 4:\n        break\n    print(f'\"{word}\" is {len(word)} characters long.')\n\n\nMore about for loops"
  },
  {
    "objectID": "slides/iterables.html#new-list-with-a-for-loop",
    "href": "slides/iterables.html#new-list-with-a-for-loop",
    "title": "Working with iterables",
    "section": "New list with a for loop",
    "text": "New list with a for loop\nWe could start an empty list and then, with a for loop, go through each token, count its characters and add it to the list.\n\nword_lengths = []\nfor word in words:\n    word_lengths.append(len(word))\nprint(word_lengths)\n\n[2, 3, 11, 4, 1, 4, 5, 2, 2, 4, 4, 2, 3, 4]\n\n\n\n\n\n\n\n\nNote\n\n\nThis is not the recommended way to create a new list!"
  },
  {
    "objectID": "slides/iterables.html#list-of-word-lengths",
    "href": "slides/iterables.html#list-of-word-lengths",
    "title": "Working with iterables",
    "section": "List of word lengths",
    "text": "List of word lengths\nThen we can do different things:\n\nf\"The shortest word in my text has {min(word_lengths)} character.\"\n\n'The shortest word in my text has 1 character.'\n\n\n\nf\"The longest word in my text has {max(word_lengths)} characters.\"\n\n'The longest word in my text has 11 characters.'\n\n\n\nf\"The average word length in my text is {round(sum(word_lengths)/len(word_lengths), 2)} characters.\"\n\n'The average word length in my text is 3.64 characters.'"
  },
  {
    "objectID": "slides/iterables.html#combining-two-lists",
    "href": "slides/iterables.html#combining-two-lists",
    "title": "Working with iterables",
    "section": "Combining two lists",
    "text": "Combining two lists\nWe can combine two lists of equal length with zip().\n\nfor item in zip(words, word_lengths):\n    print(item)\n\n('is', 2)\n('few', 3)\n('punctuation', 11)\n('easy', 4)\n('a', 1)\n('with', 4)\n('words', 5)\n('no', 2)\n('to', 2)\n('work', 4)\n('this', 4)\n('it', 2)\n('and', 3)\n('text', 4)"
  },
  {
    "objectID": "slides/iterables.html#for-loop-on-combined-lists",
    "href": "slides/iterables.html#for-loop-on-combined-lists",
    "title": "Working with iterables",
    "section": "for loop on combined lists",
    "text": "for loop on combined lists\n\nfor word, length in zip(words, word_lengths):\n    print(f'The word \"{word}\" has {length} characters.')\n\nThe word \"is\" has 2 characters.\nThe word \"few\" has 3 characters.\nThe word \"punctuation\" has 11 characters.\nThe word \"easy\" has 4 characters.\nThe word \"a\" has 1 characters.\nThe word \"with\" has 4 characters.\nThe word \"words\" has 5 characters.\nThe word \"no\" has 2 characters.\nThe word \"to\" has 2 characters.\nThe word \"work\" has 4 characters.\nThe word \"this\" has 4 characters.\nThe word \"it\" has 2 characters.\nThe word \"and\" has 3 characters.\nThe word \"text\" has 4 characters."
  },
  {
    "objectID": "slides/iterables.html#generators",
    "href": "slides/iterables.html#generators",
    "title": "Working with iterables",
    "section": "Generators",
    "text": "Generators\nzip() doesn’t return a list but a generator:\n\nzip(words, word_lengths)\n\n<zip at 0x7fdb74379100>\n\n\n\nOther useful generators are range() and enumerate():\n\n\n\nrange(3)\n\nrange(0, 3)\n\n\n\nfor i in range(3):\n    print(i)\n\n0\n1\n2\n\n\n\n\nenumerate(['a', 'b', 'c'])\n\n<enumerate at 0x7fdb7436ca00>\n\n\n\nfor item in enumerate(['a', 'b', 'c']):\n    print(item)\n\n(0, 'a')\n(1, 'b')\n(2, 'c')"
  },
  {
    "objectID": "slides/iterables.html#other-generators-range",
    "href": "slides/iterables.html#other-generators-range",
    "title": "Working with iterables",
    "section": "Other generators: range()",
    "text": "Other generators: range()\n\nfor i in range(len(words)):\n    print(f'\"{words[i]}\" is type N.{i+1} in my text'\n    f' and has {word_lengths[i]} characters.')\n\n\"is\" is type N.1 in my text and has 2 characters.\n\"few\" is type N.2 in my text and has 3 characters.\n\"punctuation\" is type N.3 in my text and has 11 characters.\n\"easy\" is type N.4 in my text and has 4 characters.\n\"a\" is type N.5 in my text and has 1 characters.\n\"with\" is type N.6 in my text and has 4 characters.\n\"words\" is type N.7 in my text and has 5 characters.\n\"no\" is type N.8 in my text and has 2 characters.\n\"to\" is type N.9 in my text and has 2 characters.\n\"work\" is type N.10 in my text and has 4 characters.\n\"this\" is type N.11 in my text and has 4 characters.\n\"it\" is type N.12 in my text and has 2 characters.\n\"and\" is type N.13 in my text and has 3 characters.\n\"text\" is type N.14 in my text and has 4 characters."
  },
  {
    "objectID": "slides/iterables.html#other-generators-enumerate",
    "href": "slides/iterables.html#other-generators-enumerate",
    "title": "Working with iterables",
    "section": "Other generators: enumerate()",
    "text": "Other generators: enumerate()\n\nfor i, word in enumerate(words):\n    print(f'\"{word}\" is type N.{i+1} in my text'\n    f' and has {word_lengths[i]} characters.')\n\n\"is\" is type N.1 in my text and has 2 characters.\n\"few\" is type N.2 in my text and has 3 characters.\n\"punctuation\" is type N.3 in my text and has 11 characters.\n\"easy\" is type N.4 in my text and has 4 characters.\n\"a\" is type N.5 in my text and has 1 characters.\n\"with\" is type N.6 in my text and has 4 characters.\n\"words\" is type N.7 in my text and has 5 characters.\n\"no\" is type N.8 in my text and has 2 characters.\n\"to\" is type N.9 in my text and has 2 characters.\n\"work\" is type N.10 in my text and has 4 characters.\n\"this\" is type N.11 in my text and has 4 characters.\n\"it\" is type N.12 in my text and has 2 characters.\n\"and\" is type N.13 in my text and has 3 characters.\n\"text\" is type N.14 in my text and has 4 characters."
  },
  {
    "objectID": "slides/iterables.html#comprehension-lists",
    "href": "slides/iterables.html#comprehension-lists",
    "title": "Working with iterables",
    "section": "Comprehension lists",
    "text": "Comprehension lists\nThe problem of creating a list (like word_lengths) with a for loop is that the computer doesn’t know how long it is going to be. A more direct way is to use comprehension lists.\n\nword_lengths = [len(word) for word in words]\nprint(word_lengths)\n\n[2, 3, 11, 4, 1, 4, 5, 2, 2, 4, 4, 2, 3, 4]\n\n\n\n\n\n\n\n\nWarning\n\n\nIt’s better to create new lists with comprehension lists, but if what you want to do is print some output, then use a for loop (so you don’t create anything new)."
  },
  {
    "objectID": "slides/iterables.html#with-conditions",
    "href": "slides/iterables.html#with-conditions",
    "title": "Working with iterables",
    "section": "With conditions",
    "text": "With conditions\n\nGet the length of the words with at least four characters.\n\n\nlong_word_lengths = [len(word) for word in words if len(word) > 4]\nprint(long_word_lengths)\n\n[11, 5]\n\n\n\n\nGet the length of the words that start with “w”.\n\n\nw_word_lengths = [len(word) for word in words if word.startswith('w')]\nprint(w_word_lengths)\n\n[4, 5, 4]"
  },
  {
    "objectID": "slides/iterables.html#also-for-dictionaries",
    "href": "slides/iterables.html#also-for-dictionaries",
    "title": "Working with iterables",
    "section": "Also for dictionaries!",
    "text": "Also for dictionaries!\n\nword_lengths_dict = { w : len(w) for w in words}\nprint(word_lengths_dict)\n\n{'is': 2, 'few': 3, 'punctuation': 11, 'easy': 4, 'a': 1, 'with': 4, 'words': 5, 'no': 2, 'to': 2, 'work': 4, 'this': 4, 'it': 2, 'and': 3, 'text': 4}\n\n\n\n\nOnly for words that start with “w”:\n\n\nw_word_lengths_dict = { w : len(w) for w in words if w.startswith('w')}\nprint(w_word_lengths_dict)\n\n{'with': 4, 'words': 5, 'work': 4}"
  },
  {
    "objectID": "slides/iterables.html#use-a-dictionary-in-a-loop",
    "href": "slides/iterables.html#use-a-dictionary-in-a-loop",
    "title": "Working with iterables",
    "section": "Use a dictionary in a loop",
    "text": "Use a dictionary in a loop\n\nfor key in word_lengths_dict:\n    print(f'The word \"{key}\" has {word_lengths_dict[key]} characters.')\n\nThe word \"is\" has 2 characters.\nThe word \"few\" has 3 characters.\nThe word \"punctuation\" has 11 characters.\nThe word \"easy\" has 4 characters.\nThe word \"a\" has 1 characters.\nThe word \"with\" has 4 characters.\nThe word \"words\" has 5 characters.\nThe word \"no\" has 2 characters.\nThe word \"to\" has 2 characters.\nThe word \"work\" has 4 characters.\nThe word \"this\" has 4 characters.\nThe word \"it\" has 2 characters.\nThe word \"and\" has 3 characters.\nThe word \"text\" has 4 characters."
  },
  {
    "objectID": "slides/iterables.html#like-two-lists",
    "href": "slides/iterables.html#like-two-lists",
    "title": "Working with iterables",
    "section": "Like two lists",
    "text": "Like two lists\n\nfor key, value in word_lengths_dict.items():\n    print(f'The word \"{key}\" has {value} characters.')\n\nThe word \"is\" has 2 characters.\nThe word \"few\" has 3 characters.\nThe word \"punctuation\" has 11 characters.\nThe word \"easy\" has 4 characters.\nThe word \"a\" has 1 characters.\nThe word \"with\" has 4 characters.\nThe word \"words\" has 5 characters.\nThe word \"no\" has 2 characters.\nThe word \"to\" has 2 characters.\nThe word \"work\" has 4 characters.\nThe word \"this\" has 4 characters.\nThe word \"it\" has 2 characters.\nThe word \"and\" has 3 characters.\nThe word \"text\" has 4 characters."
  },
  {
    "objectID": "slides/iterables.html#list-of-dictionaries",
    "href": "slides/iterables.html#list-of-dictionaries",
    "title": "Working with iterables",
    "section": "List of dictionaries",
    "text": "List of dictionaries\n\ndiscworld_death = [\n    { 'title' : 'Mort', 'year' : 1987},\n    { 'title' : 'Reaper Man', 'year' : 1991},\n    { 'title' : 'Soul Music', 'year' : 1994},\n    { 'title' : 'Hogfather', 'year' : 1996},\n    { 'title' : 'Thief of time', 'year' : 2001}\n]\n\n\n\nfor i, book in enumerate(discworld_death):\n    print(f'Book N.{i+1} of the Death series is '\n    f'\"{book[\"title\"]}\", published in {book[\"year\"]}.')\n\nBook N.1 of the Death series is \"Mort\", published in 1987.\nBook N.2 of the Death series is \"Reaper Man\", published in 1991.\nBook N.3 of the Death series is \"Soul Music\", published in 1994.\nBook N.4 of the Death series is \"Hogfather\", published in 1996.\nBook N.5 of the Death series is \"Thief of time\", published in 2001."
  },
  {
    "objectID": "slides/iterables.html#while-1",
    "href": "slides/iterables.html#while-1",
    "title": "Working with iterables",
    "section": "while",
    "text": "while\nIn a for loop, you have a list or generator and you go through its items one by one.\nWith while, you create a loop that depends on a condition.\n\nimport random\nimport time\nrandom.seed(7)\ni = 0\nwhile i < 80:\n    print(\"i is too small yet.\")\n    time.sleep(1)\n    i = random.randint(1, 100)\n    print(f\"i is now {i}.\")"
  },
  {
    "objectID": "slides/iterables.html#while-1-output",
    "href": "slides/iterables.html#while-1-output",
    "title": "Working with iterables",
    "section": "while",
    "text": "while\n\ni is too small yet.\n\n\ni is now 42.\ni is too small yet.\n\n\ni is now 20.\ni is too small yet.\n\n\ni is now 51.\ni is too small yet.\n\n\ni is now 84."
  },
  {
    "objectID": "slides/if-functions.html#booleans",
    "href": "slides/if-functions.html#booleans",
    "title": "If-statements and functions",
    "section": "Booleans",
    "text": "Booleans\n\nThings can be True or False.\nif x runs something when x is True, but not when it is False.\n\n\nif True:\n    print(\"This is true\")\n\nThis is true\n\n\n\n\nif False:\n    print(\"This is false\")"
  },
  {
    "objectID": "slides/if-functions.html#control-flow",
    "href": "slides/if-functions.html#control-flow",
    "title": "If-statements and functions",
    "section": "Control flow",
    "text": "Control flow\n\nThe point is to decide when to run things based on a condition that may or may not be true.\n\n\nbool_list = [True, False, False, True]\nfor i, b in enumerate(bool_list):\n    if b:\n        print(i, \"- This is true\")\n\n0 - This is true\n3 - This is true"
  },
  {
    "objectID": "slides/if-functions.html#boolean-statements",
    "href": "slides/if-functions.html#boolean-statements",
    "title": "If-statements and functions",
    "section": "Boolean statements",
    "text": "Boolean statements\n\nnum_list = [1, 4, 7, 2, 9, 7, 3]\nprint([x < 3 for x in num_list])\n\n[True, False, False, True, False, False, False]\n\n\n\n\nfor i, x in enumerate(num_list):\n    if x < 3:\n        print(i, f\"- {x} is smaller than 3\")\n\n0 - 1 is smaller than 3\n3 - 2 is smaller than 3\n\n\n\n\n\n[x for x in num_list if x < 3]\n\n[1, 2]"
  },
  {
    "objectID": "slides/if-functions.html#which-flow",
    "href": "slides/if-functions.html#which-flow",
    "title": "If-statements and functions",
    "section": "Which flow?",
    "text": "Which flow?\n\n\n\n\nflowchart LR\n    A[num_list] --> B{Is it smaller than 3?}\n    B -- Yes --> C[Print something]\n\n\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n    A[num_list] --> B{Is it smaller than 3?}\n    B -- Yes --> C[Print something]\n    B -- No --> D[Print something else]"
  },
  {
    "objectID": "slides/if-functions.html#if-else",
    "href": "slides/if-functions.html#if-else",
    "title": "If-statements and functions",
    "section": "if-else",
    "text": "if-else\n\nfor i, x in enumerate(num_list):\n    if x < 3:\n        print(i, f\"- {x} is smaller than 3\")\n    else:\n        print(i, f\"- {x} is not smaller than 3\")\n\n0 - 1 is smaller than 3\n1 - 4 is not smaller than 3\n2 - 7 is not smaller than 3\n3 - 2 is smaller than 3\n4 - 9 is not smaller than 3\n5 - 7 is not smaller than 3\n6 - 3 is not smaller than 3"
  },
  {
    "objectID": "slides/if-functions.html#multiple-options",
    "href": "slides/if-functions.html#multiple-options",
    "title": "If-statements and functions",
    "section": "Multiple options",
    "text": "Multiple options\n\n\n\n\nflowchart LR\n    A[num_list] --> B{Is it smaller than 3?}\n    B -- Yes --> C[Print something]\n    B -- No --> D{Is it smaller than or equal to 7?}\n    D -- Yes --> E[Print that]\n    D -- No --> F[Print something else]"
  },
  {
    "objectID": "slides/if-functions.html#if-elif-else",
    "href": "slides/if-functions.html#if-elif-else",
    "title": "If-statements and functions",
    "section": "if-elif-else",
    "text": "if-elif-else\n\nfor i, x in enumerate(num_list):\n    if x < 3:\n        print(i, f\"- {x} is smaller than 3\")\n    elif x <= 7:\n        print(i, f\"- {x} is smaller than or equal to 7\")\n    else:\n        print(i, f\"- {x} is larger than 7\")\n\n0 - 1 is smaller than 3\n1 - 4 is smaller than or equal to 7\n2 - 7 is smaller than or equal to 7\n3 - 2 is smaller than 3\n4 - 9 is larger than 7\n5 - 7 is smaller than or equal to 7\n6 - 3 is smaller than or equal to 7"
  },
  {
    "objectID": "slides/if-functions.html#other-truths",
    "href": "slides/if-functions.html#other-truths",
    "title": "If-statements and functions",
    "section": "Other truths",
    "text": "Other truths\n\nfor i in [3, 5, 0, 1]:\n    if i:\n        print(i)\n    else:\n        print(f\"{i} is false\")\n\n\n\n3\n5\n0 is false\n1\n\n\n\nMore about truth-value testing"
  },
  {
    "objectID": "slides/if-functions.html#other-truths-1",
    "href": "slides/if-functions.html#other-truths-1",
    "title": "If-statements and functions",
    "section": "Other truths",
    "text": "Other truths\n\nfor x in [\"A true statement\", \"A false statement\",\n            \"\", \"False\"]:\n    if x:\n        print(x)\n    else:\n        print(f\"{x} is false\")\n\n\n\nA true statement\nA false statement\n is false\nFalse\n\n\n\nMore about truth-value testing"
  },
  {
    "objectID": "slides/if-functions.html#why-use-a-function",
    "href": "slides/if-functions.html#why-use-a-function",
    "title": "If-statements and functions",
    "section": "Why use a function?",
    "text": "Why use a function?\n\nIt encapsulates a chain of actions that you may want to repeat multiple times.\nThe chain of actions is conceptualized as “one” action or thing that takes an input (or more) and, normally, returns an output."
  },
  {
    "objectID": "slides/if-functions.html#define-a-function",
    "href": "slides/if-functions.html#define-a-function",
    "title": "If-statements and functions",
    "section": "Define a function",
    "text": "Define a function\n\ndef sum_two(arg1, arg2):"
  },
  {
    "objectID": "slides/if-functions.html#define-a-function-1",
    "href": "slides/if-functions.html#define-a-function-1",
    "title": "If-statements and functions",
    "section": "Define a function",
    "text": "Define a function\n\ndef sum_two(arg1, arg2):\n    return arg1 + arg2\n\n\n\ndef sum_two(arg1, arg2):\n    return arg1 + arg2\n\n\nsum_two(1, 4)\n\n5"
  },
  {
    "objectID": "slides/variables.html#basic-types",
    "href": "slides/variables.html#basic-types",
    "title": "Variables",
    "section": "Basic types",
    "text": "Basic types\n\nmy_string = \"This is a string\"\nmy_integer = 7\nmy_float = 3.5\nmy_boolean = True\n\n\nEach with a different type and different methods.\n\ntype(my_string)\n\nstr\n\n\n\n\n\ntype(my_integer)\n\nint\n\n\n\n\n\ntype(my_float)\n\nfloat\n\n\n\n\n\ntype(my_boolean)\n\nbool"
  },
  {
    "objectID": "slides/variables.html#strings-some-methods",
    "href": "slides/variables.html#strings-some-methods",
    "title": "Variables",
    "section": "Strings: some methods",
    "text": "Strings: some methods\n\nlen(my_string) # note: this is not a method\n\n\n\n16\n\n\n\nmy_string + \"another string\"\n\n'This is a stringanother string'\n\n\n\nmy_string.upper()\n\n\n\n'THIS IS A STRING'\n\n\n\nmy_string.endswith('string')\n\n\n\nTrue\n\n\n\nmy_string.replace('string', 'text')\n\n\n\n'This is a text'\n\n\n\nmy_string\n\n\n\n'This is a string'"
  },
  {
    "objectID": "slides/variables.html#strings-notes",
    "href": "slides/variables.html#strings-notes",
    "title": "Variables",
    "section": "Strings: notes",
    "text": "Strings: notes\n\nStrings can be written as \"string\" or 'string'.\nStrings are inmutable: the methods that modify them return a different string.\nMethods can return a modified string or values of different types.\nThe length of a string is measured in characters.\nThe type of a string is str.\n\n\nReference for string methods"
  },
  {
    "objectID": "slides/variables.html#numbers-i",
    "href": "slides/variables.html#numbers-i",
    "title": "Variables",
    "section": "Numbers I",
    "text": "Numbers I\n\nlen(my_integer)\n\n\n\nTypeError: object of type 'int' has no len()\n\n\n\n\nlen(my_float)\n\nTypeError: object of type 'float' has no len()\n\n\n\n\n\n\n\nmy_float * my_float\n\n12.25\n\n\n\nmy_float**2\n\n12.25\n\n\n\n-my_float\n\n-3.5\n\n\n\nabs(-my_float)\n\n3.5\n\n\n\n\nmy_integer + 8\n\n15\n\n\n\ntype(my_integer/2)\n\n\n\nfloat\n\n\n\nmy_integer // 2\n\n\n\n3\n\n\n\nmy_integer % 2\n\n\n\n1"
  },
  {
    "objectID": "slides/variables.html#numbers-ii",
    "href": "slides/variables.html#numbers-ii",
    "title": "Variables",
    "section": "Numbers II",
    "text": "Numbers II\n\nmy_float > my_integer\n\nFalse\n\n\n\n\nmy_float\n\n3.5\n\n\n\n\n\nmy_integer + my_integer * my_float\n\n31.5\n\n\n\n\n\n(my_integer + my_integer) * my_float\n\n49.0\n\n\n\n\n\nmy_string + my_integer\n\n\n\nTypeError: can only concatenate str (not \"int\") to str\n\n\n\n\n\nmy_string * my_integer\n\n\n\n'This is a stringThis is a stringThis is a stringThis is a stringThis is a stringThis is a stringThis is a string'"
  },
  {
    "objectID": "slides/variables.html#numbers-notes",
    "href": "slides/variables.html#numbers-notes",
    "title": "Variables",
    "section": "Numbers: notes",
    "text": "Numbers: notes\n\nNumbers can be of type int (with no decimal points) or float (with a decimal point).\nWe can implement the basic mathematical operations with the operators +, -, /, *…\nWe can compare them with <, >, <=, >=, == and !=.\nWe cannot add strings and numbers but we can multiply a string with a number.\nIntegers and floats are inmutable.\n\n\nReference for numbers"
  },
  {
    "objectID": "slides/variables.html#booleans",
    "href": "slides/variables.html#booleans",
    "title": "Variables",
    "section": "Booleans",
    "text": "Booleans\n\nMostly True and False but in truth-value testing many things can be true/false.\nTypically as result of comparisons and boolean operations.\n\n\nmy_string.endswith('awesome')\n\nFalse\n\n\n\n6 <= 1000\n\nTrue\n\n\n\n'A' < 'B'\n\nTrue"
  },
  {
    "objectID": "slides/variables.html#boolean-operators-i",
    "href": "slides/variables.html#boolean-operators-i",
    "title": "Variables",
    "section": "Boolean operators I",
    "text": "Boolean operators I\nX and Y is True when and only when both X and Y are True.\n\n(1 + 1 == 2) and (\"python\".startswith(\"py\"))\n\nTrue\n\n\n\nIf at least one component is False, the full statement is False.\n\n(1 + 1 == 2) and (\"python\".startswith(\"r\"))\n\nFalse\n\n\n\n(1 + 1 > 2) and (\"python\".startswith(\"r\"))\n\nFalse\n\n\n\n(1 + 1 == 2) and (\"python\".startswith(\"py\")) and (3 > 4)\n\nFalse"
  },
  {
    "objectID": "slides/variables.html#boolean-operators-ii",
    "href": "slides/variables.html#boolean-operators-ii",
    "title": "Variables",
    "section": "Boolean operators II",
    "text": "Boolean operators II\nX or Y is True when at least X or Y are True.\n\n(1 + 1 == 2) or (1 + 2 == 3)\n\nTrue\n\n\n\n(1 + 1 == 2) or (\"python\".startswith(\"r\"))\n\nTrue\n\n\n\nIf all components are False, the full statement is False.\n\n(1 + 1 > 2) or (\"python\".startswith(\"r\"))\n\nFalse"
  },
  {
    "objectID": "slides/variables.html#boolean-operators-iii",
    "href": "slides/variables.html#boolean-operators-iii",
    "title": "Variables",
    "section": "Boolean operators III",
    "text": "Boolean operators III\nThe not operator negates the boolean operation it precedes. not True is False; not False is True.\n\n1 + 1 == 2\n\nTrue\n\n\n\nnot 1 + 1 == 2\n\nFalse\n\n\n\nThe following is a nice trick:\n\nnot (1 + 1 == 2) or not (1 + 2 > 3)\n\nTrue\n\n\n\nnot ((1 + 1 == 2) and (1 + 2 > 3))\n\nTrue"
  },
  {
    "objectID": "slides/variables.html#boolean-notes",
    "href": "slides/variables.html#boolean-notes",
    "title": "Variables",
    "section": "Boolean: notes",
    "text": "Boolean: notes\n\nTrue and False come mostly as result of boolean operations and comparisons.\nThey will be useful when we do flow control (e.g. “If the language of the text is French, choose the following translator…”)\n\n\nMore reference on booleans"
  },
  {
    "objectID": "slides/variables.html#lists-i",
    "href": "slides/variables.html#lists-i",
    "title": "Variables",
    "section": "Lists I",
    "text": "Lists I\n\nmy_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nmy_list\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\n\n\ntype(my_list)\n\nlist\n\n\n\nlen(my_list)\n\n7\n\n\n\n\nmy_list[0]\n\n'a'\n\n\n\nmy_list[-1]\n\n'g'"
  },
  {
    "objectID": "slides/variables.html#lists-ii",
    "href": "slides/variables.html#lists-ii",
    "title": "Variables",
    "section": "Lists II",
    "text": "Lists II\n\n'c' in my_list\n\nTrue\n\n\n\nmy_list + ['x', 'y', 'z']\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'x', 'y', 'z']\n\n\n\nmy_list[1:5]\n\n['b', 'c', 'd', 'e']\n\n\n\nnum_list = [1, 5, 7, 3, 4, 2, 8, 0.3]\nf\"The smallest element of `num_list` is {min(num_list)}; the largest is {max(num_list)}.\"\n\n'The smallest element of `num_list` is 0.3; the largest is 8.'"
  },
  {
    "objectID": "slides/variables.html#list-mutability-i",
    "href": "slides/variables.html#list-mutability-i",
    "title": "Variables",
    "section": "List mutability I",
    "text": "List mutability I\n\nmy_list.reverse()\nmy_list\n\n['g', 'f', 'e', 'd', 'c', 'b', 'a']\n\n\n\nmy_list.pop()\nmy_list\n\n['g', 'f', 'e', 'd', 'c', 'b']\n\n\n\nmy_list.append('z')\nmy_list\n\n['g', 'f', 'e', 'd', 'c', 'b', 'z']\n\n\n\nmy_list.sort()\nmy_list\n\n['b', 'c', 'd', 'e', 'f', 'g', 'z']"
  },
  {
    "objectID": "slides/variables.html#list-mutability-ii",
    "href": "slides/variables.html#list-mutability-ii",
    "title": "Variables",
    "section": "List Mutability II",
    "text": "List Mutability II\n\nsecond_list = my_list\nmy_list[2] = 'x'\n\nWe changed the third element: what is going to happen to my_list?\n\nmy_list\n\n\n\n['b', 'c', 'x', 'e', 'f', 'g', 'z']\n\n\n\nAnd what about its copy?\n\nsecond_list\n\n\n\n['b', 'c', 'x', 'e', 'f', 'g', 'z']"
  },
  {
    "objectID": "slides/variables.html#lists-notes",
    "href": "slides/variables.html#lists-notes",
    "title": "Variables",
    "section": "Lists: notes",
    "text": "Lists: notes\n\nLists are mutable: a method can change it without having to reassign it.\nAssigning the same list to another variable justs adds a reference point, it does not create a copy.\nWe can extract and modify items by their index (which starts at 0!) with the [index] notation.\n\n\nMore about lists"
  },
  {
    "objectID": "slides/variables.html#tuples-and-lists",
    "href": "slides/variables.html#tuples-and-lists",
    "title": "Variables",
    "section": "Tuples and lists",
    "text": "Tuples and lists\n\nTuples and typically used to store heterogeneous data.\n\n\nmy_tuple = ('one', 1, True)\nmy_tuple\n\n('one', 1, True)\n\n\n\n\nSets only have unique elements and cannot be indexed.\n\n\nmy_set = set([1, 1, 1, 4, 6, 4])\nmy_set\n\n{1, 4, 6}\n\n\n\nmy_set[2]\n\nTypeError: 'set' object is not subscriptable"
  },
  {
    "objectID": "slides/variables.html#strings-and-lists",
    "href": "slides/variables.html#strings-and-lists",
    "title": "Variables",
    "section": "Strings and lists",
    "text": "Strings and lists\nLike lists, strings have indices.\n\nmy_string[0:8]\n\n'This is '\n\n\n\nmy_string.find('is')\n\n2\n\n\n\nIt is also very common to switch between strings and lists:\n\nstring_as_list = my_string.split(' ')\nstring_as_list\n\n['This', 'is', 'a', 'string']\n\n\n\n'-'.join(string_as_list)\n\n'This-is-a-string'"
  },
  {
    "objectID": "slides/variables.html#dictionaries-i",
    "href": "slides/variables.html#dictionaries-i",
    "title": "Variables",
    "section": "Dictionaries I",
    "text": "Dictionaries I\n\nmy_dict = {\n    'title' : 'A Hat Full of Sky',\n    'author' : 'Terry Pratchett',\n    'year' : 2004\n}\nmy_dict\n\n{'title': 'A Hat Full of Sky', 'author': 'Terry Pratchett', 'year': 2004}\n\n\n\nlen(my_dict)\n\n3\n\n\n\ntype(my_dict)\n\ndict"
  },
  {
    "objectID": "slides/variables.html#dictionaries-ii",
    "href": "slides/variables.html#dictionaries-ii",
    "title": "Variables",
    "section": "Dictionaries II",
    "text": "Dictionaries II\n\nmy_dict['title']\n\n'A Hat Full of Sky'\n\n\n\nmy_dict['title'] = 'Small gods'\nmy_dict\n\n{'title': 'Small gods', 'author': 'Terry Pratchett', 'year': 2004}\n\n\n\nsmall_gods = {'title' : 'Small Gods', 'year' : 1992}\nmy_dict.update(small_gods)\nmy_dict\n\n{'title': 'Small Gods', 'author': 'Terry Pratchett', 'year': 1992}"
  },
  {
    "objectID": "slides/variables.html#dictionaries-iii",
    "href": "slides/variables.html#dictionaries-iii",
    "title": "Variables",
    "section": "Dictionaries III",
    "text": "Dictionaries III\n\nlist(my_dict)\n\n['title', 'author', 'year']\n\n\n\n'Author' in my_dict\n\nFalse\n\n\n\nmy_dict['Author']\n\n\n\nKeyError: 'Author'\n\n\n\n\nmy_dict[0]\n\n\n\nKeyError: 0"
  },
  {
    "objectID": "slides/variables.html#dictionaries-notes",
    "href": "slides/variables.html#dictionaries-notes",
    "title": "Variables",
    "section": "Dictionaries: notes",
    "text": "Dictionaries: notes\n\nA dictionary has key-value pairs: instead of an index you use a named key to retrieve a value.\nThe in operator to check inclusion checks for values in lists and for keys in dictionaries.\nDictionaries are also mutable.\n\n\nMore about dictionaries"
  },
  {
    "objectID": "classes/2023-02-28-iterables.html",
    "href": "classes/2023-02-28-iterables.html",
    "title": "Working with iterables",
    "section": "",
    "text": "Today we learn about iterables:"
  },
  {
    "objectID": "classes/2023-02-28-iterables.html#think-about",
    "href": "classes/2023-02-28-iterables.html#think-about",
    "title": "Working with iterables",
    "section": "Think about",
    "text": "Think about\n\nHow do you think you could use a list or a dictionary in translation?"
  },
  {
    "objectID": "classes/2023-02-21-variables.html",
    "href": "classes/2023-02-21-variables.html",
    "title": "Variables",
    "section": "",
    "text": "Today we learn about variables:"
  },
  {
    "objectID": "classes/2023-02-21-variables.html#think-about",
    "href": "classes/2023-02-21-variables.html#think-about",
    "title": "Variables",
    "section": "Think about",
    "text": "Think about\n\nWhere do you see these kinds of variables in real life, especially at work?\nHow do you think you could use a list or a dictionary in translation?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Machine Learning using Python",
    "section": "",
    "text": "Welcome to the website of the course “Introduction to Machine Learning Using Python” (February-May 2023).\nBelow you can find the notes from the different classes, which include the slides and instructions to work on the Jupyter Notebook and/or VS Code.\n\nClass notes\n\n\n\n\n\n\n\n\n\n\n\nVariables\n\n\n\n\n\n\n\nbasics\n\n\nsequences\n\n\nerrors\n\n\n\n\nIntroduction to the fundamental data types in Python.\n\n\n\n\n\n\nFeb 21, 2023\n\n\n\n\n\n\n\n\nWorking with iterables\n\n\n\n\n\n\n\nsequences\n\n\nfor loop\n\n\nwhile\n\n\nconditions\n\n\n\n\nIntroduction to iterables and for loops.\n\n\n\n\n\n\nFeb 28, 2023\n\n\n\n\n\n\nNo matching items"
  }
]