[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About this course",
    "section": "",
    "text": "Content\n\nFundamentals of Python: I know that the course website says that the focus lies on “NLP, automation, text analysis and machine learning”, but I find it more important to give you a strong basis that helps you feel confident about learning more and gives you the tools to understand tutorials and documentation. We’ll adjust the speed to the students.\nWe’ll try to cover actual fundamentals in the first half, i.e. before easter: types of variables, working with lists and dictionaries, creating functions, using classes, but also opening and saving files, using regular expressions, parsing XML.\nIn the second half we will put the regular expressions and parsing into practice and check out packages for machine learning (scikit-learn) and NLP (nltk, maybe spacy). We’ll also look a bit into testing and documenting, so that you still understand next year what you tried to do today.\n\n\n\nAssignments\n\nThere will be a final assignment that consists of solving a problem with Python code and explaining it/documenting it. For those submitting in June, it will be 80% fo the grade. For those submitting in August, it will be a bit more complex and account for 100% of the grade.\nI will propose problems that you can try to solve, but we can also brainstorm and discuss ideas during the semester as you learn more about the contents.\nThere will be two small assignments during the semester: one due after Easter and one that is a presentation at the end of the semester. Each of them accounts for 10% of the grade.\n\n\n\nRequirements\nMake sure they all have Anaconda (as late a version as possible) and VS Code installed.\nEach class:\n\nOpen Anaconda\nSelect (in Home) or create (in Environments) the appropriate environment. For the first classes we can use a basic one with no additional packages.\nIn Home, make sure that Jupyter Notebook and VS Code are installed for your environment.\nOpen Jupyter Notebook and from its file explored find your way to the folder where you store the scripts for this class. Open an existing notebook or create a new one, as appropriate. Try out the code from the slides in that notebook.\nAfter some experimentation, open VS Code to write a small script and run it in the console. Depending on the rhythm of the class, this might be the last task or something to do at home."
  },
  {
    "objectID": "slides/variables.html#basic-types",
    "href": "slides/variables.html#basic-types",
    "title": "Variables",
    "section": "Basic types",
    "text": "Basic types\n\nmy_string = \"This is a string\"\nmy_integer = 7\nmy_float = 3.5\nmy_boolean = True\n\n\nEach with a different type and different methods.\n\ntype(my_string)\n\nstr\n\n\n\n\n\ntype(my_integer)\n\nint\n\n\n\n\n\ntype(my_float)\n\nfloat\n\n\n\n\n\ntype(my_boolean)\n\nbool"
  },
  {
    "objectID": "slides/variables.html#strings-some-methods",
    "href": "slides/variables.html#strings-some-methods",
    "title": "Variables",
    "section": "Strings: some methods",
    "text": "Strings: some methods\n\nlen(my_string) # note: this is not a method\n\n\n\n16\n\n\n\nmy_string + \"another string\"\n\n'This is a stringanother string'\n\n\n\nmy_string.upper()\n\n\n\n'THIS IS A STRING'\n\n\n\nmy_string.endswith('string')\n\n\n\nTrue\n\n\n\nmy_string.replace('string', 'text')\n\n\n\n'This is a text'\n\n\n\nmy_string\n\n\n\n'This is a string'"
  },
  {
    "objectID": "slides/variables.html#strings-notes",
    "href": "slides/variables.html#strings-notes",
    "title": "Variables",
    "section": "Strings: notes",
    "text": "Strings: notes\n\nStrings can be written as \"string\" or 'string'.\nStrings are inmutable: the methods that modify them return a different string.\nMethods can return a modified string or values of different types.\nThe length of a string is measured in characters.\nThe type of a string is str.\n\n\nReference for string methods"
  },
  {
    "objectID": "slides/variables.html#numbers-i",
    "href": "slides/variables.html#numbers-i",
    "title": "Variables",
    "section": "Numbers I",
    "text": "Numbers I\n\nlen(my_integer)\n\n\n\nTypeError: object of type 'int' has no len()\n\n\n\n\nlen(my_float)\n\nTypeError: object of type 'float' has no len()\n\n\n\n\n\n\n\nmy_float * my_float\n\n12.25\n\n\n\nmy_float**2\n\n12.25\n\n\n\n-my_float\n\n-3.5\n\n\n\nabs(-my_float)\n\n3.5\n\n\n\n\nmy_integer + 8\n\n15\n\n\n\ntype(my_integer/2)\n\n\n\nfloat\n\n\n\nmy_integer // 2\n\n\n\n3\n\n\n\nmy_integer % 2\n\n\n\n1"
  },
  {
    "objectID": "slides/variables.html#numbers-ii",
    "href": "slides/variables.html#numbers-ii",
    "title": "Variables",
    "section": "Numbers II",
    "text": "Numbers II\n\nmy_float > my_integer\n\nFalse\n\n\n\n\nmy_float\n\n3.5\n\n\n\n\n\nmy_integer + my_integer * my_float\n\n31.5\n\n\n\n\n\n(my_integer + my_integer) * my_float\n\n49.0\n\n\n\n\n\nmy_string + my_integer\n\n\n\nTypeError: can only concatenate str (not \"int\") to str\n\n\n\n\n\nmy_string * my_integer\n\n\n\n'This is a stringThis is a stringThis is a stringThis is a stringThis is a stringThis is a stringThis is a string'"
  },
  {
    "objectID": "slides/variables.html#numbers-notes",
    "href": "slides/variables.html#numbers-notes",
    "title": "Variables",
    "section": "Numbers: notes",
    "text": "Numbers: notes\n\nNumbers can be of type int (with no decimal points) or float (with a decimal point).\nWe can implement the basic mathematical operations with the operators +, -, /, *…\nWe can compare them with <, >, <=, >=, == and !=.\nWe cannot add strings and numbers but we can multiply a string with a number.\nIntegers and floats are inmutable.\n\n\nReference for numbers"
  },
  {
    "objectID": "slides/variables.html#booleans",
    "href": "slides/variables.html#booleans",
    "title": "Variables",
    "section": "Booleans",
    "text": "Booleans\n\nMostly True and False but in truth-value testing many things can be true/false.\nTypically as result of comparisons and boolean operations.\n\n\nmy_string.endswith('awesome')\n\nFalse\n\n\n\n6 <= 1000\n\nTrue\n\n\n\n'A' < 'B'\n\nTrue"
  },
  {
    "objectID": "slides/variables.html#boolean-operators-i",
    "href": "slides/variables.html#boolean-operators-i",
    "title": "Variables",
    "section": "Boolean operators I",
    "text": "Boolean operators I\nX and Y is True when and only when both X and Y are True.\n\n(1 + 1 == 2) and (\"python\".startswith(\"py\"))\n\nTrue\n\n\n\nIf at least one component is False, the full statement is False.\n\n(1 + 1 == 2) and (\"python\".startswith(\"r\"))\n\nFalse\n\n\n\n(1 + 1 > 2) and (\"python\".startswith(\"r\"))\n\nFalse\n\n\n\n(1 + 1 == 2) and (\"python\".startswith(\"py\")) and (3 > 4)\n\nFalse"
  },
  {
    "objectID": "slides/variables.html#boolean-operators-ii",
    "href": "slides/variables.html#boolean-operators-ii",
    "title": "Variables",
    "section": "Boolean operators II",
    "text": "Boolean operators II\nX or Y is True when at least X or Y are True.\n\n(1 + 1 == 2) or (1 + 2 == 3)\n\nTrue\n\n\n\n(1 + 1 == 2) or (\"python\".startswith(\"r\"))\n\nTrue\n\n\n\nIf all components are False, the full statement is False.\n\n(1 + 1 > 2) or (\"python\".startswith(\"r\"))\n\nFalse"
  },
  {
    "objectID": "slides/variables.html#boolean-operators-iii",
    "href": "slides/variables.html#boolean-operators-iii",
    "title": "Variables",
    "section": "Boolean operators III",
    "text": "Boolean operators III\nThe not operator negates the boolean operation it precedes. not True is False; not False is True.\n\n1 + 1 == 2\n\nTrue\n\n\n\nnot 1 + 1 == 2\n\nFalse\n\n\n\nThe following is a nice trick:\n\nnot (1 + 1 == 2) or not (1 + 2 > 3)\n\nTrue\n\n\n\nnot ((1 + 1 == 2) and (1 + 2 > 3))\n\nTrue"
  },
  {
    "objectID": "slides/variables.html#boolean-notes",
    "href": "slides/variables.html#boolean-notes",
    "title": "Variables",
    "section": "Boolean: notes",
    "text": "Boolean: notes\n\nTrue and False come mostly as result of boolean operations and comparisons.\nThey will be useful when we do flow control (e.g. “If the language of the text is French, choose the following translator…”)\n\n\nMore reference on booleans"
  },
  {
    "objectID": "slides/variables.html#lists-i",
    "href": "slides/variables.html#lists-i",
    "title": "Variables",
    "section": "Lists I",
    "text": "Lists I\n\nmy_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nmy_list\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\n\n\ntype(my_list)\n\nlist\n\n\n\nlen(my_list)\n\n7\n\n\n\n\nmy_list[0]\n\n'a'\n\n\n\nmy_list[-1]\n\n'g'"
  },
  {
    "objectID": "slides/variables.html#lists-ii",
    "href": "slides/variables.html#lists-ii",
    "title": "Variables",
    "section": "Lists II",
    "text": "Lists II\n\n'c' in my_list\n\nTrue\n\n\n\nmy_list + ['x', 'y', 'z']\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'x', 'y', 'z']\n\n\n\nmy_list[1:5]\n\n['b', 'c', 'd', 'e']\n\n\n\nnum_list = [1, 5, 7, 3, 4, 2, 8, 0.3]\nf\"The smallest element of `num_list` is {min(num_list)}; the largest is {max(num_list)}.\"\n\n'The smallest element of `num_list` is 0.3; the largest is 8.'"
  },
  {
    "objectID": "slides/variables.html#list-mutability-i",
    "href": "slides/variables.html#list-mutability-i",
    "title": "Variables",
    "section": "List mutability I",
    "text": "List mutability I\n\nmy_list.reverse()\nmy_list\n\n['g', 'f', 'e', 'd', 'c', 'b', 'a']\n\n\n\nmy_list.pop()\nmy_list\n\n['g', 'f', 'e', 'd', 'c', 'b']\n\n\n\nmy_list.append('z')\nmy_list\n\n['g', 'f', 'e', 'd', 'c', 'b', 'z']\n\n\n\nmy_list.sort()\nmy_list\n\n['b', 'c', 'd', 'e', 'f', 'g', 'z']"
  },
  {
    "objectID": "slides/variables.html#list-mutability-ii",
    "href": "slides/variables.html#list-mutability-ii",
    "title": "Variables",
    "section": "List Mutability II",
    "text": "List Mutability II\n\nsecond_list = my_list\nmy_list[2] = 'x'\n\nWe changed the third element: what is going to happen to my_list?\n\nmy_list\n\n\n\n['b', 'c', 'x', 'e', 'f', 'g', 'z']\n\n\n\nAnd what about its copy?\n\nsecond_list\n\n\n\n['b', 'c', 'x', 'e', 'f', 'g', 'z']"
  },
  {
    "objectID": "slides/variables.html#lists-notes",
    "href": "slides/variables.html#lists-notes",
    "title": "Variables",
    "section": "Lists: notes",
    "text": "Lists: notes\n\nLists are mutable: a method can change it without having to reassign it.\nAssigning the same list to another variable justs adds a reference point, it does not create a copy.\nWe can extract and modify items by their index (which starts at 0!) with the [index] notation.\n\n\nMore about lists"
  },
  {
    "objectID": "slides/variables.html#tuples-and-lists",
    "href": "slides/variables.html#tuples-and-lists",
    "title": "Variables",
    "section": "Tuples and lists",
    "text": "Tuples and lists\n\nTuples and typically used to store heterogeneous data.\n\n\nmy_tuple = ('one', 1, True)\nmy_tuple\n\n('one', 1, True)\n\n\n\n\nSets only have unique elements and cannot be indexed.\n\n\nmy_set = set([1, 1, 1, 4, 6, 4])\nmy_set\n\n{1, 4, 6}\n\n\n\nmy_set[2]\n\nTypeError: 'set' object is not subscriptable"
  },
  {
    "objectID": "slides/variables.html#strings-and-lists",
    "href": "slides/variables.html#strings-and-lists",
    "title": "Variables",
    "section": "Strings and lists",
    "text": "Strings and lists\nLike lists, strings have indices.\n\nmy_string[0:8]\n\n'This is '\n\n\n\nmy_string.find('is')\n\n2\n\n\n\nIt is also very common to switch between strings and lists:\n\nstring_as_list = my_string.split(' ')\nstring_as_list\n\n['This', 'is', 'a', 'string']\n\n\n\n'-'.join(string_as_list)\n\n'This-is-a-string'"
  },
  {
    "objectID": "slides/variables.html#dictionaries-i",
    "href": "slides/variables.html#dictionaries-i",
    "title": "Variables",
    "section": "Dictionaries I",
    "text": "Dictionaries I\n\nmy_dict = {\n    'title' : 'A Hat Full of Sky',\n    'author' : 'Terry Pratchett',\n    'year' : 2004\n}\nmy_dict\n\n{'title': 'A Hat Full of Sky', 'author': 'Terry Pratchett', 'year': 2004}\n\n\n\nlen(my_dict)\n\n3\n\n\n\ntype(my_dict)\n\ndict"
  },
  {
    "objectID": "slides/variables.html#dictionaries-ii",
    "href": "slides/variables.html#dictionaries-ii",
    "title": "Variables",
    "section": "Dictionaries II",
    "text": "Dictionaries II\n\nmy_dict['title']\n\n'A Hat Full of Sky'\n\n\n\nmy_dict['title'] = 'Small gods'\nmy_dict\n\n{'title': 'Small gods', 'author': 'Terry Pratchett', 'year': 2004}\n\n\n\nsmall_gods = {'title' : 'Small Gods', 'year' : 1992}\nmy_dict.update(small_gods)\nmy_dict\n\n{'title': 'Small Gods', 'author': 'Terry Pratchett', 'year': 1992}"
  },
  {
    "objectID": "slides/variables.html#dictionaries-iii",
    "href": "slides/variables.html#dictionaries-iii",
    "title": "Variables",
    "section": "Dictionaries III",
    "text": "Dictionaries III\n\nlist(my_dict)\n\n['title', 'author', 'year']\n\n\n\n'Author' in my_dict\n\nFalse\n\n\n\nmy_dict['Author']\n\n\n\nKeyError: 'Author'\n\n\n\n\nmy_dict[0]\n\n\n\nKeyError: 0"
  },
  {
    "objectID": "slides/variables.html#dictionaries-notes",
    "href": "slides/variables.html#dictionaries-notes",
    "title": "Variables",
    "section": "Dictionaries: notes",
    "text": "Dictionaries: notes\n\nA dictionary has key-value pairs: instead of an index you use a named key to retrieve a value.\nThe in operator to check inclusion checks for values in lists and for keys in dictionaries.\nDictionaries are also mutable.\n\n\nMore about dictionaries"
  },
  {
    "objectID": "classes/2023-02-21-variables.html",
    "href": "classes/2023-02-21-variables.html",
    "title": "Variables",
    "section": "",
    "text": "Today we learn about variables:"
  },
  {
    "objectID": "classes/2023-02-21-variables.html#think-about",
    "href": "classes/2023-02-21-variables.html#think-about",
    "title": "Variables",
    "section": "Think about",
    "text": "Think about\n\nWhere do you see these kinds of variables in real life, especially at work?\nHow do you think you could use a list or a dictionary in translation?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Machine Learning using Python",
    "section": "",
    "text": "Welcome to the website of the course “Introduction to Machine Learning Using Python” (February-May 2023).\nBelow you can find the notes from the different classes, which include the slides and instructions to work on the Jupyter Notebook and/or VS Code.\n\nClass notes\n\n\n\n\n\n\n\n\n\n\n\nVariables\n\n\n\n\n\n\n\nbasics\n\n\nerrors\n\n\n\n\nIntroduction to the fundamental data types in Python.\n\n\n\n\n\n\nFeb 21, 2023\n\n\n\n\n\n\nNo matching items"
  }
]