{
  "hash": "767792b3b9d616a23565cfd2ae57d8bf",
  "result": {
    "markdown": "---\ntitle: \"Variables\"\nformat: revealjs\n---\n\n## Basic types\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nmy_string = \"This is a string\"\nmy_integer = 7\nmy_float = 3.5\nmy_boolean = True\n```\n:::\n\n\n. . . \n\nEach with a different `type` and different *methods*.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ntype(my_string)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nstr\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ntype(my_integer)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nint\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ntype(my_float)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nfloat\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ntype(my_boolean)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nbool\n```\n:::\n:::\n\n\n## Strings: some methods\n\n::: {.cell output-location='fragment' execution_count=6}\n``` {.python .cell-code}\nlen(my_string) # note: this is not a method\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n16\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nmy_string + \"another string\"\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n'This is a stringanother string'\n```\n:::\n:::\n\n\n::: {.cell output-location='fragment' execution_count=8}\n``` {.python .cell-code}\nmy_string.upper()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'THIS IS A STRING'\n```\n:::\n:::\n\n\n::: {.cell output-location='fragment' execution_count=9}\n``` {.python .cell-code}\nmy_string.endswith('string')\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell output-location='fragment' execution_count=10}\n``` {.python .cell-code}\nmy_string.replace('string', 'text')\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n'This is a text'\n```\n:::\n:::\n\n\n::: {.cell output-location='fragment' execution_count=11}\n``` {.python .cell-code}\nmy_string\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n'This is a string'\n```\n:::\n:::\n\n\n## Strings: notes\n\n- Strings can be written as `\"string\"` or `'string'`.\n\n- Strings are inmutable: the methods that modify them return a *different* string.\n\n- Methods can return a modified string or values of different types.\n\n- The length of a string is measured in characters.\n\n- The type of a string is `str`.\n\n::: {.footer}\n[Reference for string methods](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str)\n:::\n\n## Numbers I\n\n::: {.cell output-location='fragment' execution_count=12}\n``` {.python .cell-code}\nlen(my_integer)\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: object of type 'int' has no len()\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nlen(my_float)\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: object of type 'float' has no len()\n```\n:::\n:::\n\n\n. . .\n\n:::: {.columns}\n\n\n::: {.column width=\"50%\"}\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nmy_float * my_float\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n12.25\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nmy_float**2\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n12.25\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n-my_float\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n-3.5\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nabs(-my_float)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n3.5\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\"}\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nmy_integer + 8\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n15\n```\n:::\n:::\n\n\n::: {.cell output-location='fragment' execution_count=19}\n``` {.python .cell-code}\ntype(my_integer/2)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nfloat\n```\n:::\n:::\n\n\n::: {.cell output-location='fragment' execution_count=20}\n``` {.python .cell-code}\nmy_integer // 2\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n3\n```\n:::\n:::\n\n\n::: {.cell output-location='fragment' execution_count=21}\n``` {.python .cell-code}\nmy_integer % 2\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n1\n```\n:::\n:::\n\n\n:::\n::::\n\n## Numbers II\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nmy_float > my_integer\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nFalse\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nmy_float\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n3.5\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nmy_integer + my_integer * my_float\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n31.5\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n(my_integer + my_integer) * my_float\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n49.0\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell output-location='fragment' execution_count=26}\n``` {.python .cell-code}\nmy_string + my_integer\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: can only concatenate str (not \"int\") to str\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell output-location='fragment' execution_count=27}\n``` {.python .cell-code}\nmy_string * my_integer\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n'This is a stringThis is a stringThis is a stringThis is a stringThis is a stringThis is a stringThis is a string'\n```\n:::\n:::\n\n\n## Numbers: notes\n\n- Numbers can be of type `int` (with no decimal points) or `float` (with a decimal point).\n\n- We can implement the basic mathematical operations with the operators `+`, `-`, `/`, `*`...\n\n- We can compare them with `<`, `>`, `<=`, `>=`, `==` and `!=`.\n\n- We cannot add strings and numbers but we can multiply a string with a number.\n\n- Integers and floats are inmutable.\n\n\n::: {.footer}\n[Reference for numbers](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex)\n:::\n\n## Booleans\n\n- Mostly `True` and `False` but in truth-value testing many things can be true/false.\n\n- Typically as result of [comparisons](https://docs.python.org/3/library/stdtypes.html#comparisons) and [boolean operations](https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not).\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nmy_string.endswith('awesome')\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\nFalse\n```\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\n6 <= 1000\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\n'A' < 'B'\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\nTrue\n```\n:::\n:::\n\n\n## Boolean operators I\n\n**X and Y** is `True` when and *only when* both `X` and `Y` are `True`.\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\n(1 + 1 == 2) and (\"python\".startswith(\"py\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\nTrue\n```\n:::\n:::\n\n\n. . .\n\nIf at least one component is `False`, the full statement is `False`.\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\n(1 + 1 == 2) and (\"python\".startswith(\"r\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\nFalse\n```\n:::\n:::\n\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\n(1 + 1 > 2) and (\"python\".startswith(\"r\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\nFalse\n```\n:::\n:::\n\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\n(1 + 1 == 2) and (\"python\".startswith(\"py\")) and (3 > 4)\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\nFalse\n```\n:::\n:::\n\n\n## Boolean operators II\n\n**X or Y** is `True` when at least `X` or `Y` are `True`.\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\n(1 + 1 == 2) or (1 + 2 == 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\n(1 + 1 == 2) or (\"python\".startswith(\"r\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\nTrue\n```\n:::\n:::\n\n\n. . .\n\nIf all components are `False`, the full statement is `False`.\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\n(1 + 1 > 2) or (\"python\".startswith(\"r\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\nFalse\n```\n:::\n:::\n\n\n## Boolean operators III\n\nThe `not` operator negates the boolean operation it precedes. `not True` is `False`; `not False` is `True`.\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\n1 + 1 == 2\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nnot 1 + 1 == 2\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\nFalse\n```\n:::\n:::\n\n\n. . .\n\nThe following is a nice trick:\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nnot (1 + 1 == 2) or not (1 + 2 > 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nnot ((1 + 1 == 2) and (1 + 2 > 3))\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\nTrue\n```\n:::\n:::\n\n\n## Boolean: notes\n\n- `True` and `False` come *mostly* as result of boolean operations and comparisons.\n\n- They will be useful when we do flow control (e.g. \"If the language of the text is French, choose the following translator...\")\n\n::: {.footer}\n[More reference on booleans](https://docs.python.org/3/library/stdtypes.html#truth-value-testing)\n:::\n\n# Sequences\n\n## Lists I\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nmy_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nmy_list\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\n['a', 'b', 'c', 'd', 'e', 'f', 'g']\n```\n:::\n:::\n\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\ntype(my_list)\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\nlist\n```\n:::\n:::\n\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\nlen(my_list)\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\n7\n```\n:::\n:::\n\n\n. . . \n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\nmy_list[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\n'a'\n```\n:::\n:::\n\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nmy_list[-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\n'g'\n```\n:::\n:::\n\n\n## Lists II\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\n'c' in my_list\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nmy_list + ['x', 'y', 'z']\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'x', 'y', 'z']\n```\n:::\n:::\n\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\nmy_list[1:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\n['b', 'c', 'd', 'e']\n```\n:::\n:::\n\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\nnum_list = [1, 5, 7, 3, 4, 2, 8, 0.3]\nf\"The smallest element of `num_list` is {min(num_list)}; the largest is {max(num_list)}.\"\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\n'The smallest element of `num_list` is 0.3; the largest is 8.'\n```\n:::\n:::\n\n\n## List mutability I\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\nmy_list.reverse()\nmy_list\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\n['g', 'f', 'e', 'd', 'c', 'b', 'a']\n```\n:::\n:::\n\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\nmy_list.pop()\nmy_list\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\n['g', 'f', 'e', 'd', 'c', 'b']\n```\n:::\n:::\n\n\n::: {.cell execution_count=53}\n``` {.python .cell-code}\nmy_list.append('z')\nmy_list\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\n['g', 'f', 'e', 'd', 'c', 'b', 'z']\n```\n:::\n:::\n\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\nmy_list.sort()\nmy_list\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\n['b', 'c', 'd', 'e', 'f', 'g', 'z']\n```\n:::\n:::\n\n\n## List Mutability II\n\n::: {.cell execution_count=55}\n``` {.python .cell-code}\nsecond_list = my_list\nmy_list[2] = 'x'\n```\n:::\n\n\nWe changed the third element: what is going to happen to `my_list`?\n\n::: {.cell output-location='fragment' execution_count=56}\n``` {.python .cell-code}\nmy_list\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```\n['b', 'c', 'x', 'e', 'f', 'g', 'z']\n```\n:::\n:::\n\n\n. . .\n\nAnd what about its copy?\n\n::: {.cell output-location='fragment' execution_count=57}\n``` {.python .cell-code}\nsecond_list\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\n['b', 'c', 'x', 'e', 'f', 'g', 'z']\n```\n:::\n:::\n\n\n## Lists: notes\n\n- Lists are mutable: a method can change it without having to reassign it.\n\n- Assigning the same list to another variable justs adds a reference point, it does not create a copy.\n\n- We can extract and modify items by their index (which starts at 0!) with the `[index]` notation.\n\n::: {.footer}\n[More about lists](https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range)\n:::\n\n## Tuples and lists\n\n- [Tuples](https://docs.python.org/3/library/stdtypes.html#tuples) and typically used to store _heterogeneous data_.\n\n::: {.cell execution_count=58}\n``` {.python .cell-code}\nmy_tuple = ('one', 1, True)\nmy_tuple\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```\n('one', 1, True)\n```\n:::\n:::\n\n\n. . .\n\n- [Sets](https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset) only have unique elements and cannot be indexed.\n\n::: {.cell execution_count=59}\n``` {.python .cell-code}\nmy_set = set([1, 1, 1, 4, 6, 4])\nmy_set\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\n{1, 4, 6}\n```\n:::\n:::\n\n\n::: {.cell execution_count=60}\n``` {.python .cell-code}\nmy_set[2]\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: 'set' object is not subscriptable\n```\n:::\n:::\n\n\n## Strings and lists\n\nLike lists, strings have indices.\n\n::: {.cell execution_count=61}\n``` {.python .cell-code}\nmy_string[0:8]\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```\n'This is '\n```\n:::\n:::\n\n\n::: {.cell execution_count=62}\n``` {.python .cell-code}\nmy_string.find('is')\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\n2\n```\n:::\n:::\n\n\n. . .\n\nIt is also very common to switch between strings and lists:\n\n::: {.cell execution_count=63}\n``` {.python .cell-code}\nstring_as_list = my_string.split(' ')\nstring_as_list\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\n['This', 'is', 'a', 'string']\n```\n:::\n:::\n\n\n::: {.cell execution_count=64}\n``` {.python .cell-code}\n'-'.join(string_as_list)\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\n'This-is-a-string'\n```\n:::\n:::\n\n\n## Dictionaries I\n\n::: {.cell execution_count=65}\n``` {.python .cell-code}\nmy_dict = {\n    'title' : 'A Hat Full of Sky',\n    'author' : 'Terry Pratchett',\n    'year' : 2004\n}\nmy_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```\n{'title': 'A Hat Full of Sky', 'author': 'Terry Pratchett', 'year': 2004}\n```\n:::\n:::\n\n\n::: {.cell execution_count=66}\n``` {.python .cell-code}\nlen(my_dict)\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```\n3\n```\n:::\n:::\n\n\n::: {.cell execution_count=67}\n``` {.python .cell-code}\ntype(my_dict)\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```\ndict\n```\n:::\n:::\n\n\n## Dictionaries II\n\n::: {.cell execution_count=68}\n``` {.python .cell-code}\nmy_dict['title']\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```\n'A Hat Full of Sky'\n```\n:::\n:::\n\n\n::: {.cell execution_count=69}\n``` {.python .cell-code}\nmy_dict['title'] = 'Small gods'\nmy_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=69}\n```\n{'title': 'Small gods', 'author': 'Terry Pratchett', 'year': 2004}\n```\n:::\n:::\n\n\n::: {.cell execution_count=70}\n``` {.python .cell-code}\nsmall_gods = {'title' : 'Small Gods', 'year' : 1992}\nmy_dict.update(small_gods)\nmy_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\n{'title': 'Small Gods', 'author': 'Terry Pratchett', 'year': 1992}\n```\n:::\n:::\n\n\n## Dictionaries III\n\n::: {.cell execution_count=71}\n``` {.python .cell-code}\nlist(my_dict)\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```\n['title', 'author', 'year']\n```\n:::\n:::\n\n\n::: {.cell execution_count=72}\n``` {.python .cell-code}\n'Author' in my_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=72}\n```\nFalse\n```\n:::\n:::\n\n\n::: {.cell output-location='fragment' execution_count=73}\n``` {.python .cell-code}\nmy_dict['Author']\n```\n\n::: {.cell-output .cell-output-error}\n```\nKeyError: 'Author'\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell output-location='fragment' execution_count=74}\n``` {.python .cell-code}\nmy_dict[0]\n```\n\n::: {.cell-output .cell-output-error}\n```\nKeyError: 0\n```\n:::\n:::\n\n\n## Dictionaries: notes\n\n- A dictionary has **key-value pairs**: instead of an index you use a named key to retrieve a value.\n\n- The `in` operator to check inclusion checks for *values* in lists and for *keys* in dictionaries.\n\n- Dictionaries are also mutable.\n\n::: {.footer}\n[More about dictionaries](https://docs.python.org/3/library/stdtypes.html#mapping-types-dict)\n:::\n\n# Next up: working with iterables\n\n",
    "supporting": [
      "variables_files"
    ],
    "filters": [],
    "includes": {}
  }
}