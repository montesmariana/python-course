{
  "hash": "60a91c7cb96edb735c098d5f6d9df29c",
  "result": {
    "markdown": "---\ntitle: \"Object oriented programming\"\nformat: revealjs\n---\n\n## Functional vs OO programming\n\nFunctional programming\n:   Like a recipe: gives steps to follow\n\nObject-oriented programming\n:   Code developed around objects and their properties\n\n## Create your own objects\n\n- Create a custom class with `class`.\n\n- Name the class with CamelCase.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nclass Book:\n    pass\n```\n:::\n\n\n- Instantiate by calling the class with `()`.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nmy_book = Book()\ntype(my_book)\n```\n\n::: {.cell-output .cell-output-display execution_count=282}\n```\n__main__.Book\n```\n:::\n:::\n\n\n## Instances\n\nTwo instances of a class are different objects.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nx = Book()\ny = Book()\nx == y\n```\n\n::: {.cell-output .cell-output-display execution_count=283}\n```\nFalse\n```\n:::\n:::\n\n\n. . .\n\nCf. basic types.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\na = \"\"\nb = \"\"\na == b\n```\n\n::: {.cell-output .cell-output-display execution_count=284}\n```\nTrue\n```\n:::\n:::\n\n\n## Class attributes\n\n- Defined under the `class` line.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nclass Book:\n    language = \"English\"\n    pass\n\nmy_book = Book()\nmy_book\n```\n\n::: {.cell-output .cell-output-display execution_count=285}\n```\n<__main__.Book at 0x7f53c47131c0>\n```\n:::\n:::\n\n\n. . .\n\n- Call with dot notation.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nmy_book.language\n```\n\n::: {.cell-output .cell-output-display execution_count=286}\n```\n'English'\n```\n:::\n:::\n\n\n## Instance attributes\n\n- Defined inside the `__init__()` method.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nclass Book:\n    language = \"English\"\n\n    def __init__(self, title):\n        self.title = title\n```\n:::\n\n\n- The first argument of a method is `self`, which represents the object itself.\n\n## Instance attributes\n\n- The rest of the `__init__()` arguments are provided _when instantiating a class_.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# provide the `title` argument to `Book()`\nmy_book1 = Book(\"A hat full of sky\")\nmy_book1.title\n```\n\n::: {.cell-output .cell-output-display execution_count=288}\n```\n'A hat full of sky'\n```\n:::\n:::\n\n\n. . .\n\nThe values of instance attributes can be different for different instances.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nmy_book2 = Book(\"Small gods\")\nmy_book2.title\n```\n\n::: {.cell-output .cell-output-display execution_count=289}\n```\n'Small gods'\n```\n:::\n:::\n\n\n## Instance attributes\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nclass Book:\n    language = \"English\"\n\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n```\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nmy_book = Book(\"A hat full of sky\", \"Terry Pratchett\", 1980)\nmy_book.title\n```\n\n::: {.cell-output .cell-output-display execution_count=291}\n```\n'A hat full of sky'\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nmy_book.author\n```\n\n::: {.cell-output .cell-output-display execution_count=292}\n```\n'Terry Pratchett'\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nmy_book.year\n```\n\n::: {.cell-output .cell-output-display execution_count=293}\n```\n1980\n```\n:::\n:::\n\n\n## Instance methods I\n\nMethods are functions defined inside of classes.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nfrom datetime import date\nclass Book:\n    language = \"English\"\n\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n        \n        this_year = date.today().year\n        self.age = this_year - self.year\n\n    def get_age(self):\n        if self.age < 0:\n            return f\"This book will be published in {-self.age} years.\"\n        else:\n            return f\"This book is {self.age} years old.\"\n```\n:::\n\n\n## Instance methods I\n\n- They are called with the dot notation.\n\n- The first argument is `self`, which represents the instance.\n\n- Other arguments, if present, are provided in the call.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nmy_book = Book(\"A hat full of sky\", \"Terry Pratchett\", 1980)\nmy_book.get_age()\n```\n\n::: {.cell-output .cell-output-display execution_count=295}\n```\n'This book is 43 years old.'\n```\n:::\n:::\n\n\n## Instance methods II\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nclass Book:\n    language = \"English\"\n\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n        \n        this_year = date.today().year\n        self.age = this_year - self.year\n\n        self.characters = set()\n\n    def get_age(self):\n        if self.age < 0:\n            return f\"This book will be published in {-self.age} years.\"\n        else:\n            return f\"This book is {self.age} years old.\"\n\n    def add_character(self, name):\n        self.characters.add(name)\n```\n:::\n\n\n## Instance Methods II\n\nWe started with an empty set of characters in the definition (`__init__()`).\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nmy_book = Book(\"A hat full of sky\", \"Terry Pratchett\", 1980)\nmy_book.characters\n```\n\n::: {.cell-output .cell-output-display execution_count=297}\n```\nset()\n```\n:::\n:::\n\n\nWe can modify the instance by calling the appropriate method.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nmy_book.add_character('Tiffany Aching')\nmy_book.add_character('Granny Weatherwax')\nmy_book.add_character('Rob Anybody')\nmy_book.characters\n```\n\n::: {.cell-output .cell-output-display execution_count=298}\n```\n{'Granny Weatherwax', 'Rob Anybody', 'Tiffany Aching'}\n```\n:::\n:::\n\n\n## Printing method\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nprint(my_book)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<__main__.Book object at 0x7f53c463e1a0>\n```\n:::\n:::\n\n\n- Classes can have special methods that start and end with `__`: **dunder** methods.\n\n- These methods are not called with dot notation.\n\n- Examples:\n\n    + `__init__()` is the constructor.\n\n    + `__str__()` defines the behavior of `print()`.\n\n\n\n## Printing method\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nclass Book:\n    language = \"English\"\n\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n        \n        this_year = date.today().year\n        self.age = this_year - self.year\n\n        self.characters = set()\n\n    def get_age(self):\n        if self.age < 0:\n            return f\"This book will be published in {-self.age} years.\"\n        else:\n            return f\"This book is {self.age} years old.\"\n\n    def add_character(self, name):\n        self.characters.add(name)\n\n    def __str__(self):\n        sent_1 = f\"{self.title} was written by {self.author} in {self.language}.\"\n        sent_2 = f\"It was published in {self.year}, that is, {self.age} years ago.\"\n        if len(self.characters) > 0:\n            sent_3 = f\"The main characters are: {', '.join(self.characters)}.\"\n        else:\n            sent_3 = \"\"\n        return \"\\n\".join([sent_1, sent_2, sent_3])\n```\n:::\n\n\n## Printing method\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nmy_book = Book(\"A hat full of sky\", \"Terry Pratchett\", 1980)\nprint(my_book)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA hat full of sky was written by Terry Pratchett in English.\nIt was published in 1980, that is, 43 years ago.\n\n```\n:::\n:::\n\n\nAs we defined it, the method is sensitive to whether the characters have been defined.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nmy_book.add_character('Tiffany Aching')\nmy_book.add_character('Granny Weatherwax')\nmy_book.add_character('Rob Anybody')\nprint(my_book)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA hat full of sky was written by Terry Pratchett in English.\nIt was published in 1980, that is, 43 years ago.\nThe main characters are: Rob Anybody, Tiffany Aching, Granny Weatherwax.\n```\n:::\n:::\n\n\n## Child classes\n\n- Defined by including the parent class name.\n\n- Internally call parent attributes and methods with `super()`.\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nclass DiscWorldBook(Book):\n    def __init__(self, title, year):\n        # this is a specification of Book with always Terry Pratchett as author\n        super().__init__(title, \"Terry Pratchett\", year)\n```\n:::\n\n\n- Attributes and methods are inherited.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nmy_book = DiscWorldBook(\"A hat full of sky\", 1980)\nmy_book.language\n```\n\n::: {.cell-output .cell-output-display execution_count=304}\n```\n'English'\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nmy_book.get_age()\n```\n\n::: {.cell-output .cell-output-display execution_count=305}\n```\n'This book is 43 years old.'\n```\n:::\n:::\n\n\n## Child classes II\n\n- A child class can extend a parent class.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nclass DiscWorldBook(Book):\n    # specific class attribute\n    series = \"Discworld\"\n\n    def __init__(self, title, year):\n        super().__init__(title, \"Terry Pratchett\", year)\n        # specific (empty) instance attribute\n        self.subseries = \"\"\n\n    # specific instance method\n    def set_subseries(self, subseries):\n        self.subseries = subseries\n    \n    # specification of the print() behavior\n    def __str__(self):\n        parent = super().__str__()\n        if self.subseries:\n            return parent + f'This book belongs to the \"{self.subseries}\" subseries of {self.series}.'\n        else:\n            return parent\n```\n:::\n\n\n## Child classes II\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nmy_book = DiscWorldBook(\"A hat full of sky\", 1980)\nmy_book.series\n```\n\n::: {.cell-output .cell-output-display execution_count=307}\n```\n'Discworld'\n```\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nprint(my_book)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA hat full of sky was written by Terry Pratchett in English.\nIt was published in 1980, that is, 43 years ago.\n\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nmy_book.set_subseries(\"Tiffany Aching\")\nprint(my_book)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA hat full of sky was written by Terry Pratchett in English.\nIt was published in 1980, that is, 43 years ago.\nThis book belongs to the \"Tiffany Aching\" subseries of Discworld.\n```\n:::\n:::\n\n\n## Child classes III\n\nChild-specific attributes and methods are not available to the parent class.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nother_book = Book(\"All Systems Red\", \"Martha Wells\", 2017)\nother_book.language\n```\n\n::: {.cell-output .cell-output-display execution_count=310}\n```\n'English'\n```\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nother_book.get_age()\n```\n\n::: {.cell-output .cell-output-display execution_count=311}\n```\n'This book is 6 years old.'\n```\n:::\n:::\n\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nother_book.series\n```\n\n::: {.cell-output .cell-output-error}\n```\nAttributeError: 'Book' object has no attribute 'series'\n```\n:::\n:::\n\n\nBut you can add an attribute to an instance.\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nother_book.series = \"The Murderbot Diaries\"\nother_book.series\n```\n\n::: {.cell-output .cell-output-display execution_count=313}\n```\n'The Murderbot Diaries'\n```\n:::\n:::\n\n\n# Other packages\n\nYou have already worked with \"custom\" classes:\n\n## `requests.models.Response` {.smaller}\n\n`requests.get()` returns an object of class `Response` defined in the `models` module of the `requests` package.\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nimport requests\nhtml_page = requests.get(\"https://www.gutenberg.org/cache/epub/84/pg84-images.html\")\ntype(html_page)\n```\n\n::: {.cell-output .cell-output-display execution_count=314}\n```\nrequests.models.Response\n```\n:::\n:::\n\n\nIt has several methods and attributes, such as `.content`, `.json`, `.raw` and `.text`.\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nclass_content = [x for x in dir(html_page) if not x.startswith('_')]\nprint(class_content)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['apparent_encoding', 'close', 'connection', 'content', 'cookies', 'elapsed', 'encoding', 'headers', 'history', 'is_permanent_redirect', 'is_redirect', 'iter_content', 'iter_lines', 'json', 'links', 'next', 'ok', 'raise_for_status', 'raw', 'reason', 'request', 'status_code', 'text', 'url']\n```\n:::\n:::\n\n\n## `bs4.BeautifulSoup` {.smaller}\n\n`BeautifulSoup` _is_ a custom class defined within the `bs4` package.\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nfrom bs4 import BeautifulSoup\nsoup = BeautifulSoup(html_page.content, 'html.parser')\ntype(soup)\n```\n\n::: {.cell-output .cell-output-display execution_count=316}\n```\nbs4.BeautifulSoup\n```\n:::\n:::\n\n\n::: {.smaller}\nIt has several methods and attributes, such as `.content`, `.json`, `.raw` and `.text`.\n:::\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nclass_content = [x for x in dir(soup) if not x.startswith('_')]\nprint(class_content)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['ASCII_SPACES', 'DEFAULT_BUILDER_FEATURES', 'DEFAULT_INTERESTING_STRING_TYPES', 'NO_PARSER_SPECIFIED_WARNING', 'ROOT_TAG_NAME', 'append', 'attrs', 'builder', 'can_be_empty_element', 'cdata_list_attributes', 'childGenerator', 'children', 'clear', 'contains_replacement_characters', 'contents', 'currentTag', 'current_data', 'declared_html_encoding', 'decode', 'decode_contents', 'decompose', 'decomposed', 'default', 'descendants', 'element_classes', 'encode', 'encode_contents', 'endData', 'extend', 'extract', 'fetchNextSiblings', 'fetchParents', 'fetchPrevious', 'fetchPreviousSiblings', 'find', 'findAll', 'findAllNext', 'findAllPrevious', 'findChild', 'findChildren', 'findNext', 'findNextSibling', 'findNextSiblings', 'findParent', 'findParents', 'findPrevious', 'findPreviousSibling', 'findPreviousSiblings', 'find_all', 'find_all_next', 'find_all_previous', 'find_next', 'find_next_sibling', 'find_next_siblings', 'find_parent', 'find_parents', 'find_previous', 'find_previous_sibling', 'find_previous_siblings', 'format_string', 'formatter_for_name', 'get', 'getText', 'get_attribute_list', 'get_text', 'handle_data', 'handle_endtag', 'handle_starttag', 'has_attr', 'has_key', 'hidden', 'index', 'insert', 'insert_after', 'insert_before', 'interesting_string_types', 'isSelfClosing', 'is_empty_element', 'is_xml', 'known_xml', 'markup', 'name', 'namespace', 'new_string', 'new_tag', 'next', 'nextGenerator', 'nextSibling', 'nextSiblingGenerator', 'next_element', 'next_elements', 'next_sibling', 'next_siblings', 'object_was_parsed', 'open_tag_counter', 'original_encoding', 'parent', 'parentGenerator', 'parents', 'parse_only', 'parserClass', 'parser_class', 'popTag', 'prefix', 'preserve_whitespace_tag_stack', 'preserve_whitespace_tags', 'prettify', 'previous', 'previousGenerator', 'previousSibling', 'previousSiblingGenerator', 'previous_element', 'previous_elements', 'previous_sibling', 'previous_siblings', 'pushTag', 'recursiveChildGenerator', 'renderContents', 'replaceWith', 'replaceWithChildren', 'replace_with', 'replace_with_children', 'reset', 'select', 'select_one', 'setup', 'smooth', 'string', 'string_container', 'string_container_stack', 'strings', 'stripped_strings', 'tagStack', 'text', 'unwrap', 'wrap']\n```\n:::\n:::\n\n\n# Next up: review\n\n",
    "supporting": [
      "oop_files"
    ],
    "filters": [],
    "includes": {}
  }
}