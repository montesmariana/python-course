{
  "hash": "343d9a94d328871c49b8e288c0f73536",
  "result": {
    "markdown": "---\ntitle: \"If-statements and functions\"\nformat: revealjs\n---\n\n## Booleans\n\n- Things can be `True` or `False`.\n\n- Given a statement `if x: y`, `y` runs when `x` is `True`.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nif True:\n    print(\"This is true\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is true\n```\n:::\n:::\n\n\n. . .\n\n- `y` won't run if `x` is `False`.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nif False:\n    print(\"This is false\")\n```\n:::\n\n\n## Control flow\n\n- The point is to decide when to run things based on a condition that may or may not be true.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nbool_list = [True, False, False, True]\nfor i, b in enumerate(bool_list):\n    if b: # the same as 'if b == True:'\n        print(i, \"- This is true\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 - This is true\n3 - This is true\n```\n:::\n:::\n\n\n## Booleans from comparisons\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nx = 1\nx < 3\n```\n\n::: {.cell-output .cell-output-display execution_count=111}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nnum_list = [1, 4, 7, 2, 9, 7, 3]\n[x < 3 for x in num_list]\n```\n\n::: {.cell-output .cell-output-display execution_count=112}\n```\n[True, False, False, True, False, False, False]\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfor i, x in enumerate(num_list):\n    if x < 3:\n        print(f\"{i} - {x} is smaller than 3\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 - 1 is smaller than 3\n3 - 2 is smaller than 3\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n[x for x in num_list if x < 3]\n```\n\n::: {.cell-output .cell-output-display execution_count=114}\n```\n[1, 2]\n```\n:::\n:::\n\n\n## Booleans from methods\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nx = 'blue'\nx.startswith('b')\n```\n\n::: {.cell-output .cell-output-display execution_count=115}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ncolor_list = ['blue', 'red', 'brown', 'black', 'white']\n[x.startswith('b') for x in color_list]\n```\n\n::: {.cell-output .cell-output-display execution_count=116}\n```\n[True, False, True, True, False]\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfor i, x in enumerate(color_list):\n    if x.startswith('b'):\n        print(f\"{i} - {x} starts with 'b'.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 - blue starts with 'b'.\n2 - brown starts with 'b'.\n3 - black starts with 'b'.\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n[x for x in color_list if x.startswith('b')]\n```\n\n::: {.cell-output .cell-output-display execution_count=118}\n```\n['blue', 'brown', 'black']\n```\n:::\n:::\n\n\n## Flow control what?\n\n\n```{dot}\n//| echo: false\ndigraph G {\n    node [fontname = \"Lato\"]\n    edge [fontname = \"Lato\"]\n    \n    start [\n        label = \"color_list\";\n        shape = rect;\n    ];\n    question [\n        label = \"Does it start\\nwith 'b'?\";\n        shape = diamond;\n    ];\n    withb [\n        label = \"Print that\\nit starts with 'b'\";\n    ];\n    \n    start -> question;\n    question -> withb [ label = \"Yes\" ];\n  \n}\n```\n\n\n## What if NOT?\n\n\n\n```{dot}\n//| echo: false\ndigraph G {\n    node [fontname = \"Lato\"]\n    edge [fontname = \"Lato\"]\n    \n    start [\n        label = \"color_list\";\n        shape = rect;\n    ];\n    question [\n        label = \"Does it start\\nwith 'b'?\";\n        shape = diamond;\n    ];\n    withb [\n        label = \"Print that\\nit starts with 'b'\";\n    ];\n    without [\n        label = \"Print that it does not\\nstart with 'b'\";\n    ]\n    \n    start -> question;\n    question -> withb [ label = \"Yes\" ];\n    question -> without [ label = \"No\" ];\n  \n}\n```\n\n\n## if-else\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nfor i, x in enumerate(color_list):\n    if x.startswith('b'):\n        print(f\"{i} - {x} starts with 'b'.\")\n    else:\n        print(f\"{i} - {x} does not start with 'b'.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 - blue starts with 'b'.\n1 - red does not start with 'b'.\n2 - brown starts with 'b'.\n3 - black starts with 'b'.\n4 - white does not start with 'b'.\n```\n:::\n:::\n\n\n## What if something else?\n\n\n```{dot}\n//| echo: false\ndigraph G {\n    node [fontname = \"Lato\"];\n    edge [fontname = \"Lato\"];\n    \n    start [\n        label = \"color_list\";\n        shape = rect;\n    ];\n    question [\n        label = \"Does it start\\nwith 'b'?\";\n        shape = diamond;\n    ];\n    withb [\n        label = \"Print that\\nit starts with 'b'\";\n    ];\n    question2 [\n        label = \"Is it 'red'?\";\n        shape = diamond;\n    ]\n    red [\n        label = \"Print that\\nit is 'red'.\"\n    ]\n    without [\n        label = \"Print that it does not\\nstart with 'b'\\nnor is it red.\";\n    ]\n    \n    start -> question;\n    question -> withb [ label = \"Yes\" ];\n    question -> question2 [ label = \"No\" ];\n    question2 -> red [ label = \"Yes\" ];\n    question2 -> without [ label = \"No\" ];  \n}\n```\n\n\n## if-elif-else\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nfor i, x in enumerate(color_list):\n    if x.startswith('b'):\n        print(i, f\"- {x} starts with 'b'.\")\n    elif x == 'red':\n        print(i, f\"- {x} is 'red'.\")\n    else:\n        print(i, f\"- {x} does not start with 'b' nor is it 'red'.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 - blue starts with 'b'.\n1 - red is 'red'.\n2 - brown starts with 'b'.\n3 - black starts with 'b'.\n4 - white does not start with 'b' nor is it 'red'.\n```\n:::\n:::\n\n\n# Solo practice\n\n- Create a list to loop over\n- Draw a flow chart with two options in each split\n- Translate the flow chart to an if(-elif)-else chain\n\n## Other truths\n\n::: {.cell output-location='fragment' execution_count=14}\n``` {.python .cell-code}\nfor i in [3, 5, 0, 1]:\n    if i:\n        print(i)\n    else:\n        print(f\"{i} is false\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n5\n0 is false\n1\n```\n:::\n:::\n\n\n::: {.footer}\n[More about truth-value testing](https://docs.python.org/3/library/stdtypes.html#truth-value-testing)\n:::\n\n## Other truths\n\n::: {.cell output-location='fragment' execution_count=15}\n``` {.python .cell-code}\nfor x in [\"A true statement\", \"A false statement\",\n            \"\", \"False\"]:\n    if x:\n        print(x)\n    else:\n        print(f\"{x} is false\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA true statement\nA false statement\n is false\nFalse\n```\n:::\n:::\n\n\n::: {.footer}\n[More about truth-value testing](https://docs.python.org/3/library/stdtypes.html#truth-value-testing)\n:::\n\n# Functions\n\n## Why use a function?\n\n- It encapsulates a chain of actions that you may want to repeat multiple times.\n\n- The chain of actions is conceptualized as \"one\" action or process that takes an input (or more) and, normally, returns an output.\n\n## Define a function\n\n- `def` + function name + `(` + argument names separated by commas + `)` + `:`\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndef sum_two(arg1, arg2):\n```\n:::\n\n\n## Define a function\n\n- indent + whatever the function does\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndef sum_two(arg1, arg2):\n    res = arg1 + arg2\n```\n:::\n\n\n## Define a function\n\n- End with `return` and the output\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndef sum_two(arg1, arg2):\n    res = arg1 + arg2\n    return res\n```\n:::\n\n\n. . .\n\n- Call with: function name + `(` + arguments separated by commas + `)`\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nsum_two(1, 4)\n```\n\n::: {.cell-output .cell-output-display execution_count=124}\n```\n5\n```\n:::\n:::\n\n\n# Solo practice\n\n- Write a function that takes a name (string) and an age (value) as arguments and returns a sentence describing the situation. It should work like this:\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nprint_age(\"Mila\", 26)\n```\n\n::: {.cell-output .cell-output-display execution_count=126}\n```\n'Mila is 26 years old.'\n```\n:::\n:::\n\n\n## If-statements within functions\n\n- Maybe you don't want to print the age but whether someone is underage.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ndef is_underage(name, age):\n    if age < 18:\n        return f\"{name} is underage.\"\n    else:\n        return f\"{name} is already an adult.\"\nis_underage(\"Mila\", 26)\n```\n\n::: {.cell-output .cell-output-display execution_count=127}\n```\n'Mila is already an adult.'\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nis_underage(\"Ken\", 15)\n```\n\n::: {.cell-output .cell-output-display execution_count=128}\n```\n'Ken is underage.'\n```\n:::\n:::\n\n\n## Bad arguments\n\n- What if we don't provide the age as a number?\n\n::: {.cell output-location='fragment' execution_count=24}\n``` {.python .cell-code}\nis_underage(\"Mila\", \"26\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: '<' not supported between instances of 'str' and 'int'\n```\n:::\n:::\n\n\n- Or something else wrong for the name?\n\n::: {.cell output-location='fragment' execution_count=25}\n``` {.python .cell-code}\nis_underage([\"Mila\", \"Ari\"], 26)\n```\n\n::: {.cell-output .cell-output-display execution_count=130}\n```\n\"['Mila', 'Ari'] is already an adult.\"\n```\n:::\n:::\n\n\n## Checking arguments\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ndef is_underage(name, age):\n    # check that age is an integer\n    if type(age) != int:\n        return \"Age should be an integer!\"\n    # check that name is a string\n    if type(name) != str:\n        return \"The name should be a string!\"\n    # run\n    if age < 18:\n        return f\"{name} is underage.\"\n    else:\n        return f\"{name} is already an adult.\"\n```\n:::\n\n\n## Checking arguments\n\n- Get the right messages when bad arguments are provided.\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nis_underage(\"Mila\", \"26\")\n```\n\n::: {.cell-output .cell-output-display execution_count=132}\n```\n'Age should be an integer!'\n```\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nis_underage([\"Mila\", \"Ari\"], 26)\n```\n\n::: {.cell-output .cell-output-display execution_count=133}\n```\n'The name should be a string!'\n```\n:::\n:::\n\n\n. . .\n\n- It should still work with good arguments.\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nis_underage(\"Mila\", 26)\n```\n\n::: {.cell-output .cell-output-display execution_count=134}\n```\n'Mila is already an adult.'\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nis_underage(\"Ken\", 15)\n```\n\n::: {.cell-output .cell-output-display execution_count=135}\n```\n'Ken is underage.'\n```\n:::\n:::\n\n\n# Solo practice\n\n- Create a function that takes the name of a fruit from the dictionary below and returns its price. Consider the output if the fruit is not in the dictionary.\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nfruits = {'banana' : 0.6, 'orange' : 1.2, 'lemon' : 0.8}\n```\n:::\n\n\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nprint(get_price('banana'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe price of the banana is €0.6/kg.\n```\n:::\n:::\n\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nprint(get_price('kiwi'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI don't know the price of kiwi.\n```\n:::\n:::\n\n\n## Raising exceptions\n\n::: {.callout-important}\n### Errors\nErrors (aka Exceptions in Python) stop execution. Messages will keep it running.\n:::\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\ndef is_underage_error(name, age):\n    # raise errors if the arguments are wrong\n    if type(age) != int:\n        raise TypeError(\"Age should be an integer!\")\n    if type(name) != str:\n        raise TypeError(\"The name should be a string!\")\n    # run\n    if age < 18:\n        return f\"{name} is underage.\"\n    else:\n        return f\"{name} is already an adult.\"\n```\n:::\n\n\n## Implementation\n\nA message will keep things running.\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\n[is_underage(\"Ursula\", age) for age in [15, 20, \"5\", 80]]\n```\n\n::: {.cell-output .cell-output-display execution_count=141}\n```\n['Ursula is underage.',\n 'Ursula is already an adult.',\n 'Age should be an integer!',\n 'Ursula is already an adult.']\n```\n:::\n:::\n\n\nAn error will let you know that something is wrong.\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\n[is_underage_error(\"Ursula\", age) for age in [15, 20, \"5\", 80]]\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: Age should be an integer!\n```\n:::\n:::\n\n\n## Positional arguments\n\n- Based on the position in the call: `name` is the first argument, `age` is the second argument.\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\nis_underage(26, \"Mila\")\n```\n\n::: {.cell-output .cell-output-display execution_count=143}\n```\n'Age should be an integer!'\n```\n:::\n:::\n\n\n. . .\n\n- You get an error if they are missing.\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nis_underage(\"Robbie\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: is_underage() missing 1 required positional argument: 'age'\n```\n:::\n:::\n\n\n. . .\n\n::: {.callout-important}\nPositional arguments are compulsory.\n:::\n\n## Optional arguments\n\n- If you don't want to require an argument, you can provide a default value.\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\ndef is_underage_default(age, name = \"This person\"):\n    if type(age) != int:\n        raise TypeError(\"Age should be an integer!\")\n    if age < 18:\n        return f\"{name} is underage.\"\n    else:\n        return f\"{name} is already an adult.\"\n```\n:::\n\n\n::: {.callout-warning}\n### Argument order\n\nOptional arguments should be defined after positional arguments.\n:::\n\n## Optional arguments\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nis_underage_default(26)\n```\n\n::: {.cell-output .cell-output-display execution_count=146}\n```\n'This person is already an adult.'\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nis_underage_default(26, \"Mila\")\n```\n\n::: {.cell-output .cell-output-display execution_count=147}\n```\n'Mila is already an adult.'\n```\n:::\n:::\n\n\n. . .\n\n- For clarification, you can also provide the names of the arguments.\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\nis_underage_default(age = 26, name = \"Mila\")\n```\n\n::: {.cell-output .cell-output-display execution_count=148}\n```\n'Mila is already an adult.'\n```\n:::\n:::\n\n\n## Naming arguments\n\n- You could change the order, but it's **bad practice**.\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\nis_underage_default(name = \"Mila\", age = 26)\n```\n\n::: {.cell-output .cell-output-display execution_count=149}\n```\n'Mila is already an adult.'\n```\n:::\n:::\n\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\nis_underage(age = 26, name = \"Mila\")\n```\n\n::: {.cell-output .cell-output-display execution_count=150}\n```\n'Mila is already an adult.'\n```\n:::\n:::\n\n\n. . .\n\n- A named argument creates a variable *inside the scope* of a function: it is not valid outside.\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nprint(age)\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'age' is not defined\n```\n:::\n:::\n\n\n# Solo practice\n\n- Write a function with a positional argument, that is a string, and an optional argument that is boolean. The function should turn the string to upper case and, if the optional argument is `True` (the default value), add three exclamation marks:\n\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nscream(\"I solved it\")\n```\n\n::: {.cell-output .cell-output-display execution_count=153}\n```\n'I SOLVED IT!!!'\n```\n:::\n:::\n\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\nscream(\"I solved it\", False)\n```\n\n::: {.cell-output .cell-output-display execution_count=154}\n```\n'I SOLVED IT'\n```\n:::\n:::\n\n\n## Create a generator\n\n- A generator is a function that ends in `yield` instead of `return`.\n\n- Based on a `for` loop or `while` statement, it returns (or *yields*) one item at a time.\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\ndef fruit_offering():\n    for fruit in fruits:\n        yield f\"The price of the {fruit} is €{fruits[fruit]}/kg.\"\n```\n:::\n\n\n## Use a generator\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\nmy_fruits = fruit_offering()\nlist(my_fruits)\n```\n\n::: {.cell-output .cell-output-display execution_count=156}\n```\n['The price of the banana is €0.6/kg.',\n 'The price of the orange is €1.2/kg.',\n 'The price of the lemon is €0.8/kg.']\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\nmy_fruits = fruit_offering()\nnext(my_fruits)\n```\n\n::: {.cell-output .cell-output-display execution_count=157}\n```\n'The price of the banana is €0.6/kg.'\n```\n:::\n:::\n\n\n::: {.cell output-location='fragment' execution_count=53}\n``` {.python .cell-code}\nfor fruit in my_fruits:\n    print(fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe price of the orange is €1.2/kg.\nThe price of the lemon is €0.8/kg.\n```\n:::\n:::\n\n\n## While generating\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\ndef birthday():\n    age = 0\n    while True:\n        age += 1\n        year = \"year\" if age == 1 else \"years\"\n        yield f\"Happy birthday! You are {age} {year} old!\"\n```\n:::\n\n\n::: {.cell execution_count=55}\n``` {.python .cell-code}\nbday = birthday()\n```\n:::\n\n\n::: {.cell execution_count=56}\n``` {.python .cell-code}\nnext(bday)\n```\n\n::: {.cell-output .cell-output-display execution_count=161}\n```\n'Happy birthday! You are 1 year old!'\n```\n:::\n:::\n\n\n::: {.cell execution_count=57}\n``` {.python .cell-code}\nnext(bday)\n```\n\n::: {.cell-output .cell-output-display execution_count=162}\n```\n'Happy birthday! You are 2 years old!'\n```\n:::\n:::\n\n\n# Next up: Files\n\n",
    "supporting": [
      "if-functions_files"
    ],
    "filters": [],
    "includes": {}
  }
}