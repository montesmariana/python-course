{
  "hash": "d85737633d8eb31b11546064ed868c52",
  "result": {
    "markdown": "---\ntitle: \"Documentation\"\nformat: revealjs\n---\n\n# Docstrings\n\n## Read function documentation\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nhelp(print)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on built-in function print in module builtins:\n\nprint(...)\n    print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n    \n    Prints the values to a stream, or to sys.stdout by default.\n    Optional keyword arguments:\n    file:  a file-like object (stream); defaults to the current sys.stdout.\n    sep:   string inserted between values, default a space.\n    end:   string appended after the last value, default a newline.\n    flush: whether to forcibly flush the stream.\n\n```\n:::\n:::\n\n\n## Write function documentation: docstrings {auto-animate=\"true\"}\n\n- Numpy style\n\n- **Google style**\n\n- reST style\n\n## Write function documentation: docstrings {auto-animate=\"true\"}\n\n- **Google style**\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef print_repeated_def(name, times = 1):\n    \"\"\"Print a message a number of times.\n\n    Print an excited message one or more times.\n\n    Args:\n        name (str): The name that the message is directed to.\n        times (int, optional): The number of times to\n        print the message. Defaults to 1.\n\n    Returns:\n        str: A welcome message.\n    \"\"\"\n    return f\"Hello, {name}! \"* max(abs(times), 0)\n```\n:::\n\n\n## Function documentation\n\n- `?print_repeated_def`\n\n- `help(print_repeated_def)`\n\n- `print_repeated_def.__doc__`\n\n. . .\n\n::: {.cell execution_count=3}\n\n::: {.cell-output .cell-output-stdout}\n```\nPrint a message a number of times.\n\n    Print an excited message one or more times.\n\n    Args:\n        name (str): The name that the message is directed to.\n        times (int, optional): The number of times to\n        print the message. Defaults to 1.\n\n    Returns:\n        str: A welcome message.\n    \n```\n:::\n:::\n\n\n## Docstrings\n\n- As long comments, surrounded by `\"\"\"` or `'''` on each side.\n\n- Written inside the definition of the function / method / class.\n\n- At least a short summary or description. Optionally a longer paragraph after one blank line.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndef print_something():\n    \"\"\"Print some message.\"\"\"\n    print(\"You are awesome.\")\n```\n:::\n\n\n::: footer\n[Google docstrings examples](https://gist.github.com/redlotus/3bc387c2591e3e908c9b63b97b11d24e)\n:::\n\n## Function arguments I\n\n- Under the `Args` subtitle.\n\n- Optionally (but preferably), specify the type.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndef print_repeated(name, times):\n    \"\"\"Dedicate a message to someone.\n\n    Args:\n        name (str): Name to dedicate the message to.\n        times (int): Number of times to print the message.\n    \"\"\"\n    print(f\"Hello, {name}! \" * times)\n```\n:::\n\n\n## Function arguments II\n\n- Use [PEP 484](https://peps.python.org/pep-0484/) annotations for the types.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndef print_repeated2(name: str, times: int):\n    \"\"\"Dedicate a message to someone.\n\n    Args:\n        name: Name to dedicate the message to.\n        times: Number of times to print the message.\n    \"\"\"\n    print(f\"Hello, {name}! \" * times)\n```\n:::\n\n\n- Can be retrieved with `__annotations__` attribute:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nprint(print_repeated2.__annotations__)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': <class 'str'>, 'times': <class 'int'>}\n```\n:::\n:::\n\n\n## Optional arguments\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndef print_repeated_default(name, times = 1):\n    \"\"\"Dedicate a message to someone.\n\n    Args:\n        name (str): Name to dedicate the message to.\n        times (int, optional): Number of times to print the message.\n        Defaults to 1.\n    \"\"\"\n    print(f\"Hello, {name}! \" * times)\n```\n:::\n\n\n## Return value I\n\n- Under the `Returns:` heading.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndef return_repeated(name, times = 1):\n    \"\"\"Dedicate a message to someone.\n\n    Args:\n        name (str): Name to dedicate the message to.\n        times (int, optional): Number of times to print the message.\n        Defaults to 1.\n\n    Returns:\n        str: A dedicated message repeated a number of times.\n    \"\"\"\n    return f\"Hello, {name}! \" * times\n```\n:::\n\n\n## Return value II\n\n- With [PEP 484](https://peps.python.org/pep-0484/) annotations.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndef return_repeated(name: str, times: int = 1) -> str:\n    \"\"\"Dedicate a message to someone.\n\n    Args:\n        name: Name to dedicate the message to.\n        times (optional): Number of times to print the message.\n        Defaults to 1.\n\n    Returns:\n        A dedicated message repeated a number of times.\n    \"\"\"\n    return f\"Hello, {name}! \" * times\n```\n:::\n\n\n## Exceptions\n\n- Under the `Raises` heading.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndef return_repeated_witherror(name: str, times: int = 1) -> str:\n    \"\"\"Dedicate a message to someone.\n\n    Args:\n        name: Name to dedicate the message to.\n        times (optional): Number of times to print the message.\n        Defaults to 1.\n\n    Returns:\n        A dedicated message repeated a number of times.\n\n    Raises:\n        TypeError: If `times` is not an integer.\n        ValueError: If `times` is smaller than or equal to 0.\n    \"\"\"\n    if type(times) != int:\n        raise TypeError(\"The number of times should be an integer!\")\n    if (times <= 0):\n        raise ValueError(\"The number of times must be one or larger!\")\n    return f\"Hello, {name}! \" * times\n```\n:::\n\n\n## Examples\n\n- Optional, to show how a function is used.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndef return_repeated_help(name: str, times: int = 1) -> str:\n    \"\"\"Dedicate a message to someone.\n\n    Args:\n        name: Name to dedicate the message to.\n        times (optional): Number of times to print the message.\n        Defaults to 1.\n\n    Returns:\n        A dedicated message repeated a number of times.\n    \n    Examples:\n        >>> return_repeated(\"Kiki\", 3)\n        \"Hello, Kiki! Hello, Kiki! Hello, Kiki! \"\n    \"\"\"\n    return f\"Hello, {name}! \" * times\n```\n:::\n\n\n## Documenting classes\n\n- Document at class level or inside `__init__()`:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nclass Person:\n    def __init__(self, name, age = 20):\n        \"\"\"Class that represents a person.\n\n        Args:\n            name (str): Name of the person\n            age (int, optional): Current age of the person.\n            Defaults to 20.\n            \n        Attributes:\n            name (str): Name of the person\n            age (int): Current age of the person.\n            underage (bool): Whether the person is younger\n            than 18 years old.\n        \"\"\"\n        self.name = str(name).upper()\n        self.age = age\n        self.underage = self.age < 18\n```\n:::\n\n\n## More about docstrings\n\n- Methods are documented like any other function.\n\n- Dunder methods (e.g. `__str__`) and private methods don't need to be documented.\n\n- A `Note` section can be added for further notes.\n\n# Argparse\n\n## Argparse\n\n- Library to parse command line arguments.\n\n- For example, run the code in \"myscript.py\" providing the argument \"filename\".\n\n```shell\npython myscript.py filename\n```\n\n- Create documentation for the script that can be read with:\n\n```shell\npython myscript.py --help\n```\n\n## Mini example\n\nIn a script that can be run in the command line, you would write something like this:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nimport argparse # import the package\nparser = argparse.ArgumentParser()\nparser.add_argument('filename')\nargs = parser.parse_args()\n```\n:::\n\n\n. . .\n\nLet's go bit by bit, assuming `import argparse` has been run.\n\n\n## Create a parser\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nparser = argparse.ArgumentParser()\n```\n:::\n\n\nWe start up a parser that can have some arguments, such as:\n\n- `prog` = name of your program\n- `description` = what your program does\n- `epilog` = message at the end of your documentation page\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nparser = argparse.ArgumentParser(\n    'filereader',\n    description = 'Read a file and do something with it.',\n    epilog = 'And the file was happy ever after.')\n```\n:::\n\n\n## Add arguments\n\n- Add a positional argument named 'filename'.\n\n- After `args = parser.parse_args()`, it can be accessed as `args.filename`.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nparser.add_argument('filename')\n```\n:::\n\n\n. . .\n\n- Specify the type (it gets converted).\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nparser.add_argument('filename', type=str)\n```\n:::\n\n\n. . .\n\n- Add a description.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nparser.add_argument(\n    'filename', type=str,\n    help=\"The name of a file\")\n```\n:::\n\n\n## File as type\n\n- If you want to open the file for reading or writing, there is a special type. Then you don't need to use `open()` inside your script.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nparser.add_argument(\n    'filename',\n    type=argparse.FileType('r', encoding='utf-8'))\n```\n:::\n\n\n- You can make it an optional argument if you want to allow the standard input/output as default.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nlibrary(sys)\nparser.add_argument(\n    'filename',\n    type=argparse.FileType('r', encoding='utf-8'),\n    default = sys.stdin)\n```\n:::\n\n\n# Next up: Web scraping\n\n",
    "supporting": [
      "documentation_files"
    ],
    "filters": [],
    "includes": {}
  }
}