{
  "hash": "b32eea454c2526036702a4ad952f3934",
  "result": {
    "markdown": "---\ntitle: \"More on regular expressions\"\nformat: revealjs\n---\n\n# Regular expressions\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport re\n```\n:::\n\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/tutorial.html)\n:::\n\n## Vocabulary\n\nregex / regular expression\n:    a pattern describing a certain amount of text.\n\nmatch\n:    piece of text or sequence of bytes/characters that a pattern corresponds to.\n\nstring\n:    sequence of characters that the regular expression is applied to.\n\n> We try to get a **match** of a **regex** in a **string**.\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/tutorial.html)\n:::\n\n## Regular expression object\n\n`re.compile(regex[, flags])` &rarr; `re.Pattern` object. Useful if you want to use the same pattern multiple times.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nemail_regex = r'\\b(?P<username>[a-z0-9_.]+)@(?P<domain>[a-z0-9.-]+\\.[a-z]{2,4})\\b'\npattern = re.compile(email_regex, re.I)\ntype(pattern)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nre.Pattern\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\npattern.pattern\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n'\\\\b(?P<username>[a-z0-9_.]+)@(?P<domain>[a-z0-9.-]+\\\\.[a-z]{2,4})\\\\b'\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\npattern.groups\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n2\n```\n:::\n:::\n\n\n## Match object\n\nOutput of `re.search()`, `re.match()`, `re.fullmatch()` and the `search()`, `match()` and `fullmatch()` methods of a `re.Pattern` object.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nemail = pattern.search('My email is mariana.montes@kuleuven.be')\nemail\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n<re.Match object; span=(12, 38), match='mariana.montes@kuleuven.be'>\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nastring = re.search(r'[a-z]+\\.$', 'Here is my email.')\nastring\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n<re.Match object; span=(11, 17), match='email.'>\n```\n:::\n:::\n\n\n## Match object: components\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nemail.re\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nre.compile(r'\\b(?P<username>[a-z0-9_.]+)@(?P<domain>[a-z0-9.-]+\\.[a-z]{2,4})\\b',\n           re.IGNORECASE|re.UNICODE)\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nemail.string\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'My email is mariana.montes@kuleuven.be'\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nastring.re\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nre.compile(r'[a-z]+\\.$', re.UNICODE)\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nastring.string\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n'Here is my email.'\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nemail.expand(r'The username is \\g<username> and the domain is \\2.')\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n'The username is mariana.montes and the domain is kuleuven.be.'\n```\n:::\n:::\n\n\n## Match object: matches\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nemail.group()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n'mariana.montes@kuleuven.be'\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nemail.groups()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n('mariana.montes', 'kuleuven.be')\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nemail.group('username')\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n'mariana.montes'\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nemail.group(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n'mariana.montes'\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nastring.group()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n'email.'\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nastring.groups()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n()\n```\n:::\n:::\n\n\n## Match object: indices\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nemail.span()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n(12, 38)\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nemail.string[email.start():email.end()]\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n'mariana.montes@kuleuven.be'\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nemail.string[:email.start()]\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n'My email is '\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nastring.span()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n(11, 17)\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nastring.string[email.start():email.end()]\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n'mail.'\n```\n:::\n:::\n\n\n## Special characters\n\n`\\`, `^`, `$`, `.`, `|`, `?`, `*`, `+`, `(`, `)`, `[`, `{`.\n\n- Special meaning\n\n- If used where they shouldn't (e.g. `+` at the beginning): error\n\n- Used literally if escaped with `\\`. Combining `\\` with another character may result in a special meaning.\n\n- `]` is literal always unless you already used `[` and didn't close it yet.\n\n## Escaping and quotes\n\n- Quotation marks may have to be escaped if they match the ones you use to surround your regex.\n\n- Recommended to use raw strings to avoid escaping too much:\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nshort_string = r\"a one line raw string\"\nshort_string\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n'a one line raw string'\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nlong_string = r\"\"\"a raw string\nwith\nmany lines\n\"\"\"\nlong_string\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n'a raw string\\nwith\\nmany lines\\n'\n```\n:::\n:::\n\n\n## Non-printable characters\n\n::: div\n\n- `\\t` = tab\n- `\\r` = carriage return\n- `\\n` = line feed\n\n:::\n\n:::: columns\n\n::: column\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nprint(short_string)\nre.findall(r'\\n', short_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na one line raw string\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n[]\n```\n:::\n:::\n\n\n:::\n\n::: column\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nprint(long_string)\nre.findall(r'\\n', long_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na raw string\nwith\nmany lines\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n['\\n', '\\n', '\\n']\n```\n:::\n:::\n\n\n:::\n::::\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/nonprint.html)\n:::\n\n## Character classes\n\n- Match one out of several characters by placing them between `[]`.\n\n- Negate the match by starting with `^`. It can also match line break characters. It has to match _something_.\n\n. . .\n\n::: callout-note\n### Example\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\npattern.pattern\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n'\\\\b(?P<username>[a-z0-9_.]+)@(?P<domain>[a-z0-9.-]+\\\\.[a-z]{2,4})\\\\b'\n```\n:::\n:::\n\n\n- `[a-z0-9_.]` matches any lowercase letter, digit, `_` or `.`\n\n- `[a-z]` only matches lowercase letters.\n\n:::\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/charclass.html)\n:::\n\n## Character classes\n\n- Only special characters inside are `]`, `\\`, `^` , `-`. They can be escaped with a backslash or by changing the position so they don't take their special meaning.\n\n- A `?`, `*` or `+` afterwards matches the character _class_, not the matched character (see Backreferences).\n\n::: callout-note\n### Example\n\n- `[a-z0-9_.]+` matches any _combination_ of one or more lowercase letters, digits, `_` or `.`.\n\n- `[a-z]+` matches one or more lowecase letters, not necessarily the same letter repeated.\n:::\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/charclass.html)\n:::\n\n## Shorthand character classes: digits\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ntest_string = \"\"\"A string (test_string) with 3 numbers:\n1, 2 and the one-mentioned-before.\"\"\"\n```\n:::\n\n\n- `\\d` = `[0-9]` (but also other scripts). `\\D` is the opposite.\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nre.findall(r'\\d+', test_string)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n['3', '1', '2']\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nre.findall(r'\\D+', test_string)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n['A string (test_string) with ',\n ' numbers:\\n',\n ', ',\n ' and the one-mentioned-before.']\n```\n:::\n:::\n\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/shorthand.html)\n:::\n\n## Shorthand character classes: words\n\n- `\\w` = `[A-Za-z0-9_]`. `\\W` is the opposite.\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nprint(re.findall(r'\\w+', test_string))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['A', 'string', 'test_string', 'with', '3', 'numbers', '1', '2', 'and', 'the', 'one', 'mentioned', 'before']\n```\n:::\n:::\n\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nre.findall(r'\\W+', test_string)\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n[' ', ' (', ') ', ' ', ' ', ':\\n', ', ', ' ', ' ', ' ', '-', '-', '.']\n```\n:::\n:::\n\n\n. . .\n\n- It matches other scripts too:\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nre.findall('\\w+', '言葉 means \"word\".')\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n['言葉', 'means', 'word']\n```\n:::\n:::\n\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/shorthand.html)\n:::\n\n## Shorthand character classes: spaces\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nprint(test_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA string (test_string) with 3 numbers:\n1, 2 and the one-mentioned-before.\n```\n:::\n:::\n\n\n- `\\s` = `[ \\t\\r\\n\\f]` (`\\f` = form feed). `\\S` is the opposite.\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nre.findall(r'\\s+', test_string)\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n[' ', ' ', ' ', ' ', ' ', '\\n', ' ', ' ', ' ', ' ']\n```\n:::\n:::\n\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nprint(re.findall(r'\\S+', test_string))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['A', 'string', '(test_string)', 'with', '3', 'numbers:', '1,', '2', 'and', 'the', 'one-mentioned-before.']\n```\n:::\n:::\n\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/shorthand.html)\n:::\n\n## Shorthand character classes\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nprint(test_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA string (test_string) with 3 numbers:\n1, 2 and the one-mentioned-before.\n```\n:::\n:::\n\n\n- They can also be used inside brackets.\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\n# any sequence of digits + spaces\nre.findall(r'[\\d\\s]+', test_string)\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n[' ', ' ', ' ', ' 3 ', '\\n1', ' 2 ', ' ', ' ']\n```\n:::\n:::\n\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/shorthand.html)\n:::\n\n## Dot\n\n- Matches anything except for line breaks (unless `re.S` flag is used).\n\n- Use sparingly: it can match things you don't want to match! Sometimes a negated character class is better.\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nre.search('(.+)@', 'mariana.montes@kuleuven.be or anothermail@gmail.com').groups()\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n('mariana.montes@kuleuven.be or anothermail',)\n```\n:::\n:::\n\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nre.search('([^@]+)@', 'mariana.montes@kuleuven.be or anothermail@gmail.com').groups()\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n('mariana.montes',)\n```\n:::\n:::\n\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/dot.html)\n:::\n\n## Anchors\n\n- Does not match a character but a position\n\n- `^` = beginning of a line\n\n- `$` = end of a lne\n\n- `\\b` = word boundaries: between something that matches `\\w` and beginning/end of the string or something that matches `\\W`.\n\n::: callout-note\n### Example\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\npattern.pattern\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n'\\\\b(?P<username>[a-z0-9_.]+)@(?P<domain>[a-z0-9.-]+\\\\.[a-z]{2,4})\\\\b'\n```\n:::\n:::\n\n\n:::\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/anchors.html)\n:::\n\n## Alternation\n\n`|` to match either one sequence or another.\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nprint(long_string)\nre.findall('(string|lines)', long_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na raw string\nwith\nmany lines\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\n['string', 'lines']\n```\n:::\n:::\n\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/alternation.html)\n:::\n\n## Repetition\n\n- `{0,1}` = `?` = zero or one times\n- `{0,}` = `*` = zero or more times\n- `{1,}` = `+` = one or more times\n- `{x}` = repeat exactly `x` times\n\n::: callout-tip\n `?` after one of this makes the search lazy instead of greedy. A negated character class is more efficient, though.\n:::\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/repeat.html)\n:::\n\n## Repetition\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\npattern.pattern\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\n'\\\\b(?P<username>[a-z0-9_.]+)@(?P<domain>[a-z0-9.-]+\\\\.[a-z]{2,4})\\\\b'\n```\n:::\n:::\n\n\n- `[a-zO-9_.]+` = _at least one_ lower case letter, digit, underscore or period.\n- `[a-z]{2,4}` = _two to four_ lower case letters.\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/repeat.html)\n:::\n\n## Grouping and capturing\n\nDone with `()`:\n\n- to apply a quantifier or limit an alternation\n- creates a numbered group unless it starts with `?:` (non-capturing group)\n- creates a named group if it starts with `?P<name>`\n\n::: callout-note\n### Example\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\npattern.pattern\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\n'\\\\b(?P<username>[a-z0-9_.]+)@(?P<domain>[a-z0-9.-]+\\\\.[a-z]{2,4})\\\\b'\n```\n:::\n:::\n\n\n:::\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/brackets.html)\n:::\n\n## Backreferences\n\nTo match the same text again\n\n- `\\1` for the first capturing group, `\\2` for the second... (non-capturing groups are excluded)\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\nemail.re.pattern\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\n'\\\\b(?P<username>[a-z0-9_.]+)@(?P<domain>[a-z0-9.-]+\\\\.[a-z]{2,4})\\\\b'\n```\n:::\n:::\n\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nemail.string\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\n'My email is mariana.montes@kuleuven.be'\n```\n:::\n:::\n\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nemail.expand(r'The username is \\1 and the domain is \\2.')\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\n'The username is mariana.montes and the domain is kuleuven.be.'\n```\n:::\n:::\n\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/backref.html)\n:::\n\n## Backreferences\n\nThere is a difference between `[ab]+` and `(a|b)\\1+`:\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nre.search(r'[ab]+', \"abby\").group()\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\n'abb'\n```\n:::\n:::\n\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\nre.search(r'(a|b)\\1+', \"abby\").group()\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\n'bb'\n```\n:::\n:::\n\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/backref.html)\n:::\n\n## Backreferences for replacement\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\nre.sub(\n    '([a-z]+)@([A-Za-z]+.com)', # regex\n    r'The username is \\1 and the domain is \\2.', # replacement\n    'lowercase@UpperCase.com', #string\n    )\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\n'The username is lowercase and the domain is UpperCase.com.'\n```\n:::\n:::\n\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/backref.html)\n:::\n\n## Free spacing and comments\n\n- Allow to use spaces between \"logical sections\".\n\n- Add comments with `#`.\n\n- With the `re.X` flag.\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/freespacing.html) - [re.X](https://docs.python.org/2/library/re.html#re.X)\n:::\n\n## Free spacing and comments\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\npat = re.compile(\n    r\"\"\"\\b               # word boundary\n        (?P<username>    # username group\n        [a-z0-9_.] +     # one or more lowercase/digits/underscore/period\n        )\n        @                # at symbol\n        (?P<domain>      # domain group\n        [a-z0-9.-] +     # one or more lowercase/digits/period/dash\n        \\.               # a literal period\n        [a-z]     {2,4}  # two to four lowercase letters\n        )\n        \\b               # word boundary\"\"\", re.X)\npat.search('mariana.montes@kuleuven.be').groups()\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\n('mariana.montes', 'kuleuven.be')\n```\n:::\n:::\n\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/freespacing.html) - [re.X](https://docs.python.org/2/library/re.html#re.X)\n:::\n\n## Mode modifiers\n\n- Case insensitive (`i`) and free-spacing + comments (`x`)\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\nre.search(r'(?xi) [a-z] +', 'AaBbCc')\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\n<re.Match object; span=(0, 6), match='AaBbCc'>\n```\n:::\n:::\n\n\n::: {.cell execution_count=53}\n``` {.python .cell-code}\nre.compile(r'  [a-z] +  ', re.I | re.X).search('AaBbCc')\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\n<re.Match object; span=(0, 6), match='AaBbCc'>\n```\n:::\n:::\n\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/modifiers.html) - [`re.compile()`](https://docs.python.org/2/library/re.html#re.compile)\n:::\n\n## Mode modifiers: multilinear\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\nalliter = \"\"\"apple\nbanana\nmelon\nmilk\n\"\"\"\nre.search(r'(?m)^a[a-z]+$', alliter)\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\n<re.Match object; span=(0, 5), match='apple'>\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell execution_count=55}\n``` {.python .cell-code}\nre.compile(r'^b[a-z]+$', re.M).search(alliter)\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\n<re.Match object; span=(6, 12), match='banana'>\n```\n:::\n:::\n\n\n. . .\n\n::: {.cell execution_count=56}\n``` {.python .cell-code}\nre.search(r'^a[a-z]+$', alliter)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=57}\n``` {.python .cell-code}\nre.search(r'^a[a-z\\n]+$', alliter)\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\n<re.Match object; span=(0, 24), match='apple\\nbanana\\nmelon\\nmilk\\n'>\n```\n:::\n:::\n\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/modifiers.html) - [`re.compile()`](https://docs.python.org/2/library/re.html#re.compile)\n:::\n\n## Lookaround\n\n- Don't return matches but whether a match is made or not.\n\n- Not capturing groups (but can have groups inside if you want to capture).\n\n- Options: lookahead (`(?...)`) or lookbehind (`(?<...)`).\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/lookaround.html)\n:::\n\n## Lookahead\n\n+ `q(?!u)` matches a 'q' that is NOT followed by an 'u'.\n+ `q(?=u)` matches a 'q' followed by an 'u' but not the 'u' itself.\n    - `q(?=u)i` can never match anything!\n    - Can be very useful to find a match with *n* characters, e.g. `\\b(?=\\w{6}\\b)\\w*cat\\w*` matches a word with exactly 6 characters that contains the pattern _cat_.\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/lookaround.html)\n:::\n\n## Lookbehind\n\n- No quantifiers or backreferences, alternation only if they have the same length.\n\n+ `(?<!a)b` matches a 'b' NOT preceded by an 'a'\n+ `(?<=a)b` matches a 'b' preceded by an 'a', but not the 'a'.\n\n::: footer\n[regular-expressions.info](https://www.regular-expressions.info/lookaround.html)\n:::\n\n# Next up: scikit-learn\n\n",
    "supporting": [
      "regex_files"
    ],
    "filters": [],
    "includes": {}
  }
}