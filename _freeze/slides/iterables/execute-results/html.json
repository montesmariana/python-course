{
  "hash": "c3b8da5a239d2d04e204eb53ff9a82f8",
  "result": {
    "markdown": "---\ntitle: \"Working with iterables\"\nformat: revealjs\n---\n\n## Lists\n\n**Problem**: I have a text and I would like to know:\n\n- How many types and tokens it has\n\n- How long its words are\n\n. . .\n\n**How do we go about this with Python?**\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\ntext = (\"This is a text with a few words and \"\n    \"no punctuation and it is easy to work with\")\ntext\n```\n\n::: {.cell-output .cell-output-display execution_count=258}\n```\n'This is a text with a few words and no punctuation and it is easy to work with'\n```\n:::\n:::\n\n\n## Basic tokenization\n\nWe'll turn the text into all lower case and make a list splitting it via the spaces.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ntokenized_text = text.lower().split(' ')\ntokenized_text\n```\n\n::: {.cell-output .cell-output-display execution_count=259}\n```\n['this',\n 'is',\n 'a',\n 'text',\n 'with',\n 'a',\n 'few',\n 'words',\n 'and',\n 'no',\n 'punctuation',\n 'and',\n 'it',\n 'is',\n 'easy',\n 'to',\n 'work',\n 'with']\n```\n:::\n:::\n\n\n## Types and tokens\n\nTokens are the individual elements.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nn_tokens = len(tokenized_text)\nf\"My text has {n_tokens} tokens.\"\n```\n\n::: {.cell-output .cell-output-display execution_count=260}\n```\n'My text has 18 tokens.'\n```\n:::\n:::\n\n\n. . .\n\nTypes are _unique_ elements.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ntypes = set(tokenized_text)\ntypes\n```\n\n::: {.cell-output .cell-output-display execution_count=261}\n```\n{'a',\n 'and',\n 'easy',\n 'few',\n 'is',\n 'it',\n 'no',\n 'punctuation',\n 'text',\n 'this',\n 'to',\n 'with',\n 'words',\n 'work'}\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nn_types = len(types)\n```\n:::\n\n\n## Info summary\n\n::: {.cell execution_count=6}\n``` {.python .cell-code .code-overflow-wrap}\n(f\"My text has {n_tokens} tokens and {n_types} types, \"\nf\"i.e. a type token ratio of {round(n_tokens/n_types, 2)}.\")\n```\n\n::: {.cell-output .cell-output-display execution_count=263}\n```\n'My text has 18 tokens and 14 types, i.e. a type token ratio of 1.29.'\n```\n:::\n:::\n\n\n. . .\n\nOK, what about the length of *each* word?\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nwords = list(types)\nprint(words)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['punctuation', 'with', 'and', 'words', 'no', 'to', 'text', 'easy', 'it', 'this', 'work', 'is', 'few', 'a']\n```\n:::\n:::\n\n\n## for loops\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nfor word in words:\n    print(word)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npunctuation\nwith\nand\nwords\nno\nto\ntext\neasy\nit\nthis\nwork\nis\nfew\na\n```\n:::\n:::\n\n\n::: {.footer}\n[More about `for` loops](https://docs.python.org/3.10/tutorial/controlflow.html#for-statements)\n:::\n\n## for loops\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nfor word in words:\n    print(f'\"{word}\" is {len(word)} characters long.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\"punctuation\" is 11 characters long.\n\"with\" is 4 characters long.\n\"and\" is 3 characters long.\n\"words\" is 5 characters long.\n\"no\" is 2 characters long.\n\"to\" is 2 characters long.\n\"text\" is 4 characters long.\n\"easy\" is 4 characters long.\n\"it\" is 2 characters long.\n\"this\" is 4 characters long.\n\"work\" is 4 characters long.\n\"is\" is 2 characters long.\n\"few\" is 3 characters long.\n\"a\" is 1 characters long.\n```\n:::\n:::\n\n\n::: {.footer}\n[More about `for` loops](https://docs.python.org/3.10/tutorial/controlflow.html#for-statements)\n:::\n\n## for loops: continue\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfor word in words:\n    if len(word) < 4:\n        continue\n    print(f'\"{word}\" is {len(word)} characters long.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\"punctuation\" is 11 characters long.\n\"with\" is 4 characters long.\n\"words\" is 5 characters long.\n\"text\" is 4 characters long.\n\"easy\" is 4 characters long.\n\"this\" is 4 characters long.\n\"work\" is 4 characters long.\n```\n:::\n:::\n\n\n::: {.footer}\n[More about `for` loops](https://docs.python.org/3.10/tutorial/controlflow.html#for-statements)\n:::\n\n## for loops: break\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nfor word in words:\n    if len(word) < 4:\n        break\n    print(f'\"{word}\" is {len(word)} characters long.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\"punctuation\" is 11 characters long.\n\"with\" is 4 characters long.\n```\n:::\n:::\n\n\n::: {.footer}\n[More about `for` loops](https://docs.python.org/3.10/tutorial/controlflow.html#for-statements)\n:::\n\n# Solo practice\n\n- Loop over a list\n- Print and/or manipulate your items\n- Use `continue` and `break`\n\n## New list with a for loop\n\nWe could start an empty list and then, with a `for` loop, go through each token, count its characters and add it to the list.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nword_lengths = []\nfor word in words:\n    word_lengths.append(len(word))\nprint(word_lengths)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[11, 4, 3, 5, 2, 2, 4, 4, 2, 4, 4, 2, 3, 1]\n```\n:::\n:::\n\n\n::: callout-important\n### Note\nThis is not the recommended way to create a new list!\n:::\n\n## List of word lengths\n\nThen we can do different things:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nf\"The shortest word in my text has {min(word_lengths)} character.\"\n```\n\n::: {.cell-output .cell-output-display execution_count=270}\n```\n'The shortest word in my text has 1 character.'\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nf\"The longest word in my text has {max(word_lengths)} characters.\"\n```\n\n::: {.cell-output .cell-output-display execution_count=271}\n```\n'The longest word in my text has 11 characters.'\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nf\"The average word length in my text is {round(sum(word_lengths)/len(word_lengths), 2)} characters.\"\n```\n\n::: {.cell-output .cell-output-display execution_count=272}\n```\n'The average word length in my text is 3.64 characters.'\n```\n:::\n:::\n\n\n## Combining two lists\n\nWe can combine two lists of equal length with `zip()`.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nfor item in zip(words, word_lengths):\n    print(item)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n('punctuation', 11)\n('with', 4)\n('and', 3)\n('words', 5)\n('no', 2)\n('to', 2)\n('text', 4)\n('easy', 4)\n('it', 2)\n('this', 4)\n('work', 4)\n('is', 2)\n('few', 3)\n('a', 1)\n```\n:::\n:::\n\n\n## for loop on combined lists\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nfor word, length in zip(words, word_lengths):\n    print(f'The word \"{word}\" has {length} characters.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe word \"punctuation\" has 11 characters.\nThe word \"with\" has 4 characters.\nThe word \"and\" has 3 characters.\nThe word \"words\" has 5 characters.\nThe word \"no\" has 2 characters.\nThe word \"to\" has 2 characters.\nThe word \"text\" has 4 characters.\nThe word \"easy\" has 4 characters.\nThe word \"it\" has 2 characters.\nThe word \"this\" has 4 characters.\nThe word \"work\" has 4 characters.\nThe word \"is\" has 2 characters.\nThe word \"few\" has 3 characters.\nThe word \"a\" has 1 characters.\n```\n:::\n:::\n\n\n## Generators\n\n`zip()` doesn't return a list but a *generator*:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nzip(words, word_lengths)\n```\n\n::: {.cell-output .cell-output-display execution_count=275}\n```\n<zip at 0x7f4128f55600>\n```\n:::\n:::\n\n\n. . .\n\nOther useful generators are `range()` and `enumerate()`:\n\n:::: {.columns}\n::: {.column width=\"40%\"}\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nrange(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=276}\n```\nrange(0, 3)\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nfor i in range(3):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"60%\"}\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nenumerate(['a', 'b', 'c'])\n```\n\n::: {.cell-output .cell-output-display execution_count=278}\n```\n<enumerate at 0x7f4124655b00>\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nfor item in enumerate(['a', 'b', 'c']):\n    print(item)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(0, 'a')\n(1, 'b')\n(2, 'c')\n```\n:::\n:::\n\n\n:::\n::::\n\n## Other generators: `range()`\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nfor i in range(len(words)):\n    print(f'\"{words[i]}\" is type N.{i+1} in my text'\n    f' and has {word_lengths[i]} characters.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\"punctuation\" is type N.1 in my text and has 11 characters.\n\"with\" is type N.2 in my text and has 4 characters.\n\"and\" is type N.3 in my text and has 3 characters.\n\"words\" is type N.4 in my text and has 5 characters.\n\"no\" is type N.5 in my text and has 2 characters.\n\"to\" is type N.6 in my text and has 2 characters.\n\"text\" is type N.7 in my text and has 4 characters.\n\"easy\" is type N.8 in my text and has 4 characters.\n\"it\" is type N.9 in my text and has 2 characters.\n\"this\" is type N.10 in my text and has 4 characters.\n\"work\" is type N.11 in my text and has 4 characters.\n\"is\" is type N.12 in my text and has 2 characters.\n\"few\" is type N.13 in my text and has 3 characters.\n\"a\" is type N.14 in my text and has 1 characters.\n```\n:::\n:::\n\n\n## Other generators: `enumerate()`\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nfor i, word in enumerate(words):\n    print(f'\"{word}\" is type N.{i+1} in my text'\n    f' and has {word_lengths[i]} characters.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\"punctuation\" is type N.1 in my text and has 11 characters.\n\"with\" is type N.2 in my text and has 4 characters.\n\"and\" is type N.3 in my text and has 3 characters.\n\"words\" is type N.4 in my text and has 5 characters.\n\"no\" is type N.5 in my text and has 2 characters.\n\"to\" is type N.6 in my text and has 2 characters.\n\"text\" is type N.7 in my text and has 4 characters.\n\"easy\" is type N.8 in my text and has 4 characters.\n\"it\" is type N.9 in my text and has 2 characters.\n\"this\" is type N.10 in my text and has 4 characters.\n\"work\" is type N.11 in my text and has 4 characters.\n\"is\" is type N.12 in my text and has 2 characters.\n\"few\" is type N.13 in my text and has 3 characters.\n\"a\" is type N.14 in my text and has 1 characters.\n```\n:::\n:::\n\n\n# Solo practice\n\n- Use `range()`, `enumerate()` and/or `zip()` and loop over the result.\n- You may use `continue` or `break`.\n\n## Comprehension lists\n\nThe problem of creating a list (like `word_lengths`) with a for loop is that the computer doesn't know how long it is going to be. A more direct way is to use **comprehension lists**.\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nword_lengths = [len(word) for word in words]\nprint(word_lengths)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[11, 4, 3, 5, 2, 2, 4, 4, 2, 4, 4, 2, 3, 1]\n```\n:::\n:::\n\n\n::: callout-warning\nIt's better to create new lists with comprehension lists,\nbut if what you want to do is *print some output*, then use a `for` loop (so you don't create anything new).\n:::\n\n## With conditions\n\n- Get the length of the words with at least four characters.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nlong_word_lengths = [len(word) for word in words if len(word) > 4]\nprint(long_word_lengths)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[11, 5]\n```\n:::\n:::\n\n\n. . .\n\n- Get the length of the words that start with \"w\".\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nw_word_lengths = [len(word) for word in words if word.startswith('w')]\nprint(w_word_lengths)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[4, 5, 4]\n```\n:::\n:::\n\n\n## Also for dictionaries!\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nword_lengths_dict = { w : len(w) for w in words}\nprint(word_lengths_dict)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'punctuation': 11, 'with': 4, 'and': 3, 'words': 5, 'no': 2, 'to': 2, 'text': 4, 'easy': 4, 'it': 2, 'this': 4, 'work': 4, 'is': 2, 'few': 3, 'a': 1}\n```\n:::\n:::\n\n\n. . .\n\n- Only for words that start with \"w\":\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nw_word_lengths_dict = { w : len(w) for w in words if w.startswith('w')}\nprint(w_word_lengths_dict)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'with': 4, 'words': 5, 'work': 4}\n```\n:::\n:::\n\n\n## Use a dictionary in a loop\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nfor key in word_lengths_dict:\n    print(f'The word \"{key}\" has {word_lengths_dict[key]} characters.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe word \"punctuation\" has 11 characters.\nThe word \"with\" has 4 characters.\nThe word \"and\" has 3 characters.\nThe word \"words\" has 5 characters.\nThe word \"no\" has 2 characters.\nThe word \"to\" has 2 characters.\nThe word \"text\" has 4 characters.\nThe word \"easy\" has 4 characters.\nThe word \"it\" has 2 characters.\nThe word \"this\" has 4 characters.\nThe word \"work\" has 4 characters.\nThe word \"is\" has 2 characters.\nThe word \"few\" has 3 characters.\nThe word \"a\" has 1 characters.\n```\n:::\n:::\n\n\n## Like two lists\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nfor key, value in word_lengths_dict.items():\n    print(f'The word \"{key}\" has {value} characters.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe word \"punctuation\" has 11 characters.\nThe word \"with\" has 4 characters.\nThe word \"and\" has 3 characters.\nThe word \"words\" has 5 characters.\nThe word \"no\" has 2 characters.\nThe word \"to\" has 2 characters.\nThe word \"text\" has 4 characters.\nThe word \"easy\" has 4 characters.\nThe word \"it\" has 2 characters.\nThe word \"this\" has 4 characters.\nThe word \"work\" has 4 characters.\nThe word \"is\" has 2 characters.\nThe word \"few\" has 3 characters.\nThe word \"a\" has 1 characters.\n```\n:::\n:::\n\n\n## List of dictionaries\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\ndiscworld_death = [\n    { 'title' : 'Mort', 'year' : 1987},\n    { 'title' : 'Reaper Man', 'year' : 1991},\n    { 'title' : 'Soul Music', 'year' : 1994},\n    { 'title' : 'Hogfather', 'year' : 1996},\n    { 'title' : 'Thief of time', 'year' : 2001}\n]\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nfor i, book in enumerate(discworld_death):\n    print(f'Book N.{i+1} of the Death series is '\n    f'\"{book[\"title\"]}\", published in {book[\"year\"]}.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBook N.1 of the Death series is \"Mort\", published in 1987.\nBook N.2 of the Death series is \"Reaper Man\", published in 1991.\nBook N.3 of the Death series is \"Soul Music\", published in 1994.\nBook N.4 of the Death series is \"Hogfather\", published in 1996.\nBook N.5 of the Death series is \"Thief of time\", published in 2001.\n```\n:::\n:::\n\n\n# While\n\n## while\n\nIn a `for` loop, you have a list or generator and you go through its items one by one.\n\nWith `while`, you create a loop that depends on a condition.\n\n::: {.cell output-location='slide' execution_count=34}\n``` {.python .cell-code}\nimport random\nimport time\nrandom.seed(7)\ni = 0\nwhile i < 80:\n    print(\"i is too small yet.\")\n    time.sleep(1)\n    i = random.randint(1, 100)\n    print(f\"i is now {i}.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ni is too small yet.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\ni is now 42.\ni is too small yet.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\ni is now 20.\ni is too small yet.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\ni is now 51.\ni is too small yet.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\ni is now 84.\n```\n:::\n:::\n\n\n# Next up: conditions\n\n",
    "supporting": [
      "iterables_files"
    ],
    "filters": [],
    "includes": {}
  }
}