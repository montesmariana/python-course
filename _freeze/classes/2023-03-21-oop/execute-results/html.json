{
  "hash": "9e61da6d091c51cb64b1c82567a0f593",
  "result": {
    "markdown": "---\ntitle: \"Working with files\"\nformat: html\ndate: 2023-03-21\ncategories:\n    - classes\n    - basics\ndescription: Different ways of working with files and parsing text.\n---\n\nToday we learn about [object oriented programming](../slides/oop.qmd){target=\"_blank\"}:\n\n- Creating and instantiating custom classes\n- Attributes and methods\n- Children and inheritance\n\n<div>\n\n```{=html}\n<iframe class=\"slide-deck\" src=\"../slides/oop.html\"></iframe>\n```\n\n</div>\n\n# What to do in Jupyter\n\nFollow along the presentation and copy (or rewrite) the code in your Jupyter Notebook. You can also write down extra notes as markdown and experiment with the different variable types.\n\n# What to do in VS Code\n\n[Last class](2023-03-14-files.qmd) we used some functions created before and applied them to a dictionary read from a file.\n\nThis time, instead, we will read the same contents from [a file](_resources/books.json) but instead of using the functions we will create instances of the `Book` and `DiscWorldBook` classes defined in the slides.\n\nThe first step is to load the libraries.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport json # to read the json\nfrom datetime import date # to find out the current year\n```\n:::\n\n\nAfterwards we can define our classes.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nclass Book:\n    language = \"English\"\n\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n        \n        this_year = date.today().year\n        self.age = this_year - self.year\n\n        self.characters = set()\n\n    def get_age(self):\n        if self.age < 0:\n            return f\"This book will be published in {-self.age} years.\"\n        else:\n            return f\"This book is {self.age} years old.\"\n\n    def add_character(self, name):\n        self.characters.add(name)\n\n    def __str__(self):\n        sent_1 = f\"{self.title} was written by {self.author} in {self.language}.\"\n        sent_2 = f\"It was published in {self.year}, that is, {self.age} years ago.\"\n        if len(self.characters) > 0:\n            sent_3 = f\"The main characters are: {', '.join(self.characters)}.\"\n        else:\n            sent_3 = \"\"\n        return \"\\n\".join([sent_1, sent_2, sent_3])\n\nclass DiscWorldBook(Book):\n    series = \"Discworld\"\n\n    def __init__(self, title, year):\n        super().__init__(title, \"Terry Pratchett\", year)\n        self.subseries = \"\"\n\n    def set_subseries(self, subseries):\n        self.subseries = subseries\n    \n    def __str__(self):\n        parent = super().__str__()\n        if self.subseries:\n            return parent + f'\\nThis book belongs to the \"{self.subseries}\" subseries of {self.series}.'\n        else:\n            return parent\n```\n:::\n\n\nNext we can read the json file.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nbooks_file = '_resources/books.json'\nwith open(books_file, encoding = 'utf-8') as f:\n    books = json.load(f)\nlen(books)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n6\n```\n:::\n:::\n\n\nThe output is a list with small dictionaries, each of which has the following keys: \"title\", \"author\", \"year\", \"language\" and \"main_characters\". In one case, the language is not \"English\" and there are no characters. In addition, Discworld books also have a \"subseries\" key. We can use this information to distinguish which books should be turned into instances of `DiscWorldBook` and which into instances of `Book`.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfor book in books:\n    if 'subseries' in book:\n        my_book = DiscWorldBook(book['title'], book['year'])\n        my_book.subseries = book['subseries']\n    else:\n        my_book = Book(book['title'], book['author'], book['year'])\n    if book['language'] != \"English\":\n        my_book.language = book['language']\n    for character in book['main_characters']:\n        my_book.add_character(character)\n    print(my_book)\n    print('----')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA hat full of sky was written by Terry Pratchett in English.\nIt was published in 2004, that is, 19 years ago.\nThe main characters are: Tiffany Aching, Granny Weatherwax, Rob Anybody.\nThis book belongs to the \"Tiffany Aching\" subseries of Discworld.\n----\nSmall gods was written by Terry Pratchett in English.\nIt was published in 1992, that is, 31 years ago.\nThe main characters are: Brutha, Om.\nThis book belongs to the \"Gods\" subseries of Discworld.\n----\nThe color of magic was written by Terry Pratchett in English.\nIt was published in 1983, that is, 40 years ago.\nThe main characters are: Twoflower, Rincewind.\nThis book belongs to the \"Unseen University\" subseries of Discworld.\n----\nThe shepherd's crown was written by Terry Pratchett in English.\nIt was published in 2015, that is, 8 years ago.\nThe main characters are: Tiffany Aching, Nightshade, Peaseblossom.\nThis book belongs to the \"Tiffany Aching\" subseries of Discworld.\n----\nAll systems red was written by Martha Wells in English.\nIt was published in 2017, that is, 6 years ago.\nThe main characters are: Dr. Mensah, Murderbot, Arada.\n----\nEl libro de los abrazos was written by Eduardo Galeano in Spanish.\nIt was published in 1989, that is, 34 years ago.\n\n----\n```\n:::\n:::\n\n\n",
    "supporting": [
      "2023-03-21-oop_files"
    ],
    "filters": [],
    "includes": {}
  }
}