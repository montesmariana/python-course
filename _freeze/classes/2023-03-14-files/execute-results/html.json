{
  "hash": "a4735acf557859844e415cb9a089942b",
  "result": {
    "markdown": "---\ntitle: \"Working with files\"\nformat: html\ndate: 2023-03-07\ncategories:\n    - files\n    - regex\n    - errors\n    - parsing\ndescription: Different ways of working with files and parsing text.\n---\n\nToday we learn about [files](../slides/files/index.qmd){target=\"_blank\"}:\n\n- Download a file based on the URL with `requests`\n- HTML file structure and `bs4`\n- Regular expressions with `re`\n- Dataframes with `pandas`\n- JSON files\n- `OSError`, `try` and `except`\n\n<div>\n\n```{=html}\n<iframe class=\"slide-deck\" src=\"../slides/files/index.html\"></iframe>\n```\n\n</div>\n\n\n# What to do in Jupyter\n\nFollow along the presentation and copy (or rewrite) the code in your Jupyter Notebook. You can also write down extra notes as markdown and experiment with the different variable types.\n\n# What to do in VS Code\n\n[Last class](2023-03-07-if-functions.qmd) we created a function to work on a list of dictionaries.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\ndef check_book(book):\n    # check that the input is a dictionary\n    if type(book) != dict:\n        raise TypeError(\"Please provide a dictionary!\")\n    \n    # check that the dict has the right keys\n\n    for key in ['title', 'author', 'language', 'year', 'main_characters']:\n        if not key in book:\n            raise KeyError(f\"'{key}' is missing from the dictionary!\")\n        # check the types\n        if key == 'year':\n            if type(book[key]) != int:\n                raise TypeError(f\"The year should be an integer!\")\n        elif key == \"main_characters\":\n            if type(book[key]) != list:\n                raise TypeError(f\"The main characters should be provided as a list!\")\n        elif type(book[key]) != str:\n            raise TypeError(f\"The {key} should be a string!\")\n    return\n\ndef describe_book(book):\n    # check that the input is correct\n    check_book(book)\n\n    sent_1 = f\"{book['title'].title()} was written by {book['author'].title()} in {book['language']}.\"\n    sent_2 = f\"It was published in {book['year']}, that is, {2023-book['year']} years ago.\"\n    sent_3 = f\"The main characters are: {', '.join(book['main_characters'])}.\"\n    book_description = \"\\n\".join([sent_1, sent_2, sent_3])\n    print(book_description)\n```\n:::\n\n\nRewrite the script so that, instead of defining the contents of the dictionary manually, it reads them from a JSON file.\nYou can also write another script that has the contents and _writes_ them to the JSON file.\n\n",
    "supporting": [
      "2023-03-14-files_files"
    ],
    "filters": [],
    "includes": {}
  }
}